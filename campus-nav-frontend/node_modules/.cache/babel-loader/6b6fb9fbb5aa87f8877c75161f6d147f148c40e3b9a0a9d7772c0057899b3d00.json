{"ast":null,"code":"// import React from \"react\"\n// import { Link } from 'react-router-dom';\n// import  { useEffect, useRef, useState } from \"react\";\n// import { MapContainer, TileLayer, useMap, LayersControl } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// //import Fuse from \"fuse.js\";\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n// //import { Link } from 'react-router-dom';\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n\n//     if (!map) return;\n//     if (!mapRef.current) return;\n\n//     // Initialize and add the compass control\n//     const compass = new L.Control.Compass({\n//       autoActive: true,\n//       showDigit: true,\n//     });\n//     map.addControl(compass);\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 70,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`} &nbsp; | &nbsp;\n//           ⏱ Time: {duration} min\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\n\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n\n//   const customLocations = {\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"9AM–6PM\", description: \"A place for study and research\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Place for shopping and dining\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"Emergency medical services\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \"Place of worship\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Sports facilities\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–7PM\", description: \"Computer labs and resources\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Place to send and receive\" },\n\n//     // \"Library\": { lat: 14.335461, lng: 78.538369 ,type:\"study\",description:\"Consists of many resources to refer and a place where we can study peacefully\"},\n//     // \"CSE Block\": { lat: 14.336241, lng: 78.541992,type:\"Department\",description:\"Department of Computer Science and Engineering\"},\n//     // \"ECE Block\": { lat: 14.334558, lng: 78.541885 ,type:\"Department\",description:\"Department of Electronics and Communication Engineering\"},\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188,type:\"Department\",hours:\"\",description:\"Department of Metallurgical and Materials Engineering\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395,type:\"Department\",description:\"Department of Electrical and Electronics Engineering\" },\n\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308 ,type:\"Department\",description:\"Department of Mechanical Engineering\"},\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505 ,type:\"Department\",description:\"Department of Chemical Engineering\"},\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514,type:\"\",description:\"Department of Civil Engineering\" },\n\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223,type:\"\",description:\"\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779 ,type:\"Department\",description:\"\"},\n\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412,type:\"Hostel\",description:\"Accomodation for female students\" },\n\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720,type:\"Hostel\",description:\"Accomodation for male students\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234,type:\"Hostel\",description:\"Accomodation for male students\" },\n\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152,type:\"Department\",description:\"place \" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661,type:\"\",description:\"\" },\n\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791,type:\"\",description:\"\" },\n//    \"Student Activity Center\": { lat: 14.338203, lng: 78.540398,type:\"\",description:\"\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465,type:\"\",description:\"\"},\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477 ,type:\"Food\",description:\"\"},\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701 ,type:\"Food\",description:\"\"},\n\n//     \"SBI\": { lat: 14.337374, lng: 78.534579,type:\"Bank\",description:\"\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249,type:\"\",description:\"\"},\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874,type:\"Play\",description:\"\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652 ,type:\"\",description:\"\"},\n\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744,type:\"Hostel\",description:\"\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896,type:\"Hostel\",description:\"\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776,type:\"Academic\",description:\"\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480,type:\"Religious\",description:\"\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775,type:\"Laundry\",description:\"\" },\n\n//   };\n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.href = \"/login\";\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     // Ensure map is initialized before attempting to open a popup\n//     if (mapRef.current) {\n//       // Show popup with block details\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//         <h3>${name}</h3>\n//         <p><strong>Type:</strong> ${type}</p>\n//         <p><strong>Hours:</strong> ${hours}</p>\n//         <p><strong>Description:</strong> ${description}</p>\n//       `;\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n\n//     <div style={{ height: \"100vh\", width: \"100%\", position: \"relative\" }}>\n//       {/* Sidebar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1000,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       {/* Input Bar */}\n//       <div style={{\n//   position: \"absolute\",\n//   top: 10,\n//   left: \"50%\",\n//   transform: \"translateX(-50%)\",\n//   zIndex: 1000,\n//   display: \"flex\",\n//   gap: \"8px\",\n//   background: \"#fff\",\n//   padding: \"10px\",\n//   borderRadius: \"8px\",\n//   boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n// }}>\n//   <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => setSourceText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => setDestinationText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n\n//   {/* Travel Mode Dropdown */}\n//   <select\n//     value={travelMode}\n//     onChange={(e) => setTravelMode(e.target.value)}\n//     style={{\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       background: \"#fff\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     <option value=\"walk\">🚶 Walk</option>\n//     <option value=\"bicycle\">🚴 Bicycle</option>\n//     <option value=\"vehicle\">🚗 Vehicle</option>\n//   </select>\n\n//   <button\n//     onClick={handleRoute}\n//     style={{\n//       background: \"#28a745\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     Route\n//   </button>\n//   <div className=\"photos-link\">\n//         <Link to=\"/photos\">Photos</Link>\n//       </div>\n// </div>\n\n//       {/* Map */}\n//       <MapContainer\n\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n\n//           compass.addTo(mapRef.current);\n//         }}\n\n//       >\n\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//         />\n//       <LayersControl position=\"topright\">\n//   <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n//     <TileLayer\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//     />\n//   </LayersControl.BaseLayer>\n\n//   <LayersControl.BaseLayer name=\"Satellite View\">\n//     <TileLayer\n//       attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//       url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//     />\n//   </LayersControl.BaseLayer>\n// </LayersControl>\n\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//        {/* Logout */}\n//        <button\n//         onClick={handleLogout}\n//         style={{\n//           position: \"absolute\",\n//           right: 10,\n//           bottom: 25,\n//           padding: \"8px 12px\",\n//           background: \"red\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"5px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         Logout\n//       </button>\n//     </div>\n\n//   );\n// };\n\n// export default MapPage;\n\n// import React from \"react\"\n// import { Link } from 'react-router-dom';\n// import  { useEffect, useRef, useState } from \"react\";\n// import { MapContainer, TileLayer, useMap, LayersControl } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// //import Fuse from \"fuse.js\";\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n// //import { Link } from 'react-router-dom';\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n\n//     if (!map) return;\n//     if (!mapRef.current) return;\n//   const compass = new L.Control.Compass({\n//     autoActive: true,\n//     showDigit: true,\n//   }).addTo(map);\n\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 70,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`}\n\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\n\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n\n//   const customLocations = {\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"9AM–6PM\", description: \"A place for study and research\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Place for shopping and dining\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"Emergency medical services\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \"Place of worship\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Sports facilities\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–7PM\", description: \"Computer labs and resources\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Place to send and receive\" },\n\n//     // \"Library\": { lat: 14.335461, lng: 78.538369 ,type:\"study\",description:\"Consists of many resources to refer and a place where we can study peacefully\"},\n//     // \"CSE Block\": { lat: 14.336241, lng: 78.541992,type:\"Department\",description:\"Department of Computer Science and Engineering\"},\n//     // \"ECE Block\": { lat: 14.334558, lng: 78.541885 ,type:\"Department\",description:\"Department of Electronics and Communication Engineering\"},\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188,type:\"Department\",hours:\"\",description:\"Department of Metallurgical and Materials Engineering\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395,type:\"Department\",description:\"Department of Electrical and Electronics Engineering\" },\n\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308 ,type:\"Department\",description:\"Department of Mechanical Engineering\"},\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505 ,type:\"Department\",description:\"Department of Chemical Engineering\"},\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514,type:\"\",description:\"Department of Civil Engineering\" },\n\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223,type:\"\",description:\"\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779 ,type:\"Department\",description:\"\"},\n\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412,type:\"Hostel\",description:\"Accomodation for female students\" },\n\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720,type:\"Hostel\",description:\"Accomodation for male students\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234,type:\"Hostel\",description:\"Accomodation for male students\" },\n\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152,type:\"Department\",description:\"place \" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661,type:\"\",description:\"\" },\n\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791,type:\"\",description:\"\" },\n//    \"Student Activity Center\": { lat: 14.338203, lng: 78.540398,type:\"\",description:\"\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465,type:\"\",description:\"\"},\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477 ,type:\"Food\",description:\"\"},\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701 ,type:\"Food\",description:\"\"},\n\n//     \"SBI\": { lat: 14.337374, lng: 78.534579,type:\"Bank\",description:\"\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249,type:\"\",description:\"\"},\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874,type:\"Play\",description:\"\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652 ,type:\"\",description:\"\"},\n\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744,type:\"Hostel\",description:\"\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896,type:\"Hostel\",description:\"\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776,type:\"Academic\",description:\"\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480,type:\"Religious\",description:\"\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775,type:\"Laundry\",description:\"\" },\n\n//   };\n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.href = \"/login\";\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     // Ensure map is initialized before attempting to open a popup\n//     if (mapRef.current) {\n//       // Show popup with block details\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//       <div>\n//         <h3>${name}</h3>\n//         <p><strong>Type:</strong> ${type}</p>\n//         <p><strong>Hours:</strong> ${hours}</p>\n//         <p><strong>Description:</strong> ${description}</p>\n//       </div>\n//     `;\n\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n\n//     <div style={{ height: \"100vh\", width: \"100%\", position: \"relative\" }}>\n//       {/* Sidebar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1000,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       {/* Input Bar */}\n//       <div style={{\n//   position: \"absolute\",\n//   top: 10,\n//   left: \"50%\",\n//   transform: \"translateX(-50%)\",\n//   zIndex: 1000,\n//   display: \"flex\",\n//   gap: \"8px\",\n//   background: \"#fff\",\n//   padding: \"10px\",\n//   borderRadius: \"8px\",\n//   boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n// }}>\n//   <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => setSourceText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => setDestinationText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n\n//   {/* Travel Mode Dropdown */}\n//   <select\n//     value={travelMode}\n//     onChange={(e) => setTravelMode(e.target.value)}\n//     style={{\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       background: \"#fff\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     <option value=\"walk\">🚶 Walk</option>\n//     <option value=\"bicycle\">🚴 Bicycle</option>\n//     <option value=\"vehicle\">🚗 Vehicle</option>\n//   </select>\n\n//   <button\n//     onClick={handleRoute}\n//     style={{\n//       background: \"#28a745\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     Route\n//   </button>\n//   <div className=\"photos-link\">\n//         <Link to=\"/photos\">Photos</Link>\n//       </div>\n// </div>\n\n//       {/* Map */}\n//       <MapContainer\n\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n\n//           compass.addTo(mapRef.current);\n//         }}\n\n//       >\n\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//         />\n//       <LayersControl position=\"topright\">\n//   <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n//     <TileLayer\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//     />\n//   </LayersControl.BaseLayer>\n\n//   <LayersControl.BaseLayer name=\"Satellite View\">\n//     <TileLayer\n//       attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//       url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//     />\n//   </LayersControl.BaseLayer>\n// </LayersControl>\n\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//        {/* Logout */}\n//        <button\n//         onClick={handleLogout}\n//         style={{\n//           position: \"absolute\",\n//           right: 10,\n//           bottom: 25,\n//           padding: \"8px 12px\",\n//           background: \"red\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"5px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         Logout\n//       </button>\n//     </div>\n\n//   );\n// };\n\n// export default MapPage;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// //import { Link } from 'react-router-dom';\n// import { MapContainer, TileLayer, useMap, LayersControl, Marker, Popup } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// import Navbar from './Navbar'; // adjust the path if Navbar.js is in a different folder\n// import {GeoSearchControl, OpenStreetMapProvider} from 'leaflet-geosearch';\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n\n// const handleLogout = () => {\n//   localStorage.removeItem(\"token\"); // Or whatever key you're using\n//   window.location.href = \"/login\"; // Adjust if using React Router\n// };\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n//     if (!map) return;\n//     if (mapRef.current) {\n//       const compass = new L.Control.Compass({\n//         autoActive: true,\n//         showDigit: true,\n//       });\n//       compass.addTo(mapRef.current);\n//     }\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 70,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`} &nbsp; | &nbsp;\n//           ⏱ Time: {duration} min\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\n//   const [position, setPosition] = useState(null);\n//   const [address, setAddress] = useState('Fetching Address...')\n\n//   const [activeInput, setActiveInput] = useState(null); // NEW: Track which input is focused\n\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n\n//   const customLocations = {\n\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223, type: \"Academic\", hours: \"9AM–10PM\", description: \"Centralized building with classrooms, seminar halls, and faculty offices for academic activities\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779, type: \"Academic\", hours: \"9AM–10PM\", description: \"Administrative and teaching space for various departmental operations and academic sessions\" },\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720, type: \"Hostel\", hours: \"24x7\", description: \"On-campus residential block for male students with secure lodging and basic amenities\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234, type: \"Hostel\", hours: \"24x7\", description: \"Well-facilitated hostel for male students offering comfort, security, and communal living\" },\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505, type: \"Department\", hours: \"9AM–5PM\", description: \"Dedicated facility for chemical engineering studies, including research and lab-based learning.\" },\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514, type: \"Department\", hours: \"9AM–5PM\", description: \"Engineering block supporting civil engineering courses, design labs, and project spaces\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–5PM\", description: \"Central computing facility with computer labs and high-speed internet resources.\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering providing academic and technical infrastructure\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering offering labs and classrooms\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electrical and Electronics Engineering supporting circuits, machines, and power systems\" },\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students with safety and residential services.\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Residential facility for girl students with necessary hostel amenities.\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652, type: \"Guest facility\", hours: \"24x7\", description: \"Well-maintained guest house for hosting visiting faculty, guests, and dignitaries.\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"24x7 medical facility for basic healthcare and emergency services on campus\" },\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791, type: \"Administration\", hours: \"9AM–5PM\", description: \"Institutional cell responsible for maintaining and enhancing academic quality\" },\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152, type: \"Department\", hours: \"9AM–5PM\", description: \"Lab facility used by multiple departments for academic experiments and practical sessions\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775, type: \"Laundry\", hours: \"9AM–5PM\", description: \"Laundry service center for washing and drying hostel students’ clothes.\" },\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"7AM–11PM\", description: \"Central resource hub with a wide collection of books, journals, and study spaces.\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480, type: \"Religious\", hours: \"9AM–7PM\", description: \"Place of worship for Muslim students and staff within the campus.\" },\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Mechanical Engineering equipped for academic and technical training.\" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661, type: \"Department\", hours: \"9AM–5PM\", description: \"Workshop with tools and machinery for mechanical hands-on training and fabrication\" },\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477, type: \"Food\", hours: \"7AM–9PM\", description: \"Dining hall serving meals to students with regular breakfast, lunch, and dinner\" },\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701, type: \"Food\", hours: \"7AM–9PM\", description: \"Catering facility providing nutritious food to hostel residents and students.\" },\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Metallurgical and Materials Engineering for academic and research purposes\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776, type: \"Academic\", hours: \"9AM–5PM\", description: \"Academic buildings from the original campus supporting multiple disciplines\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592, type: \"Hostel\", hours: \"24x7\", description: \"Boys’ hostel located in the older section of the campus with residential facilities.\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896, type: \"Hostel\", hours: \"24x7\", description: \"Another boys’ hostel in the old campus with accommodation services.\" },\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744, type: \"Hostel\", hours: \"24x7\", description: \"Girls’ hostel located in the old campus area offering safe living spaces.\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914, type: \"Hostel\", hours: \"24x7\", description: \"Second girls’ hostel from the old block, supporting student housing.\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249, type: \"Security\", hours: \"24x7\", description: \"Campus law enforcement unit ensuring discipline, emergency handling, and general safety.\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Postal unit on campus for sending letters, parcels, and accessing courier services.\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465, type: \"Utility\", hours: \"9AM–5PM\", description: \"Electricity management center responsible for power regulation and backup systems.\" },\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874, type: \"Play\", hours: \"6AM-8PM\", description: \"Multipurpose playground for sports practices, matches, and college-level tournaments.\" },\n//     \"SBI\": { lat: 14.337374, lng: 78.534579, type: \"Bank\", hours: \"9AM–5PM\", description: \"Banking facility providing financial services including ATM, account handling, and transactions\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Commercial area within campus for everyday shopping, snacks, and general items\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Indoor and outdoor sports facilities including courts, tracks, and fitness zones.\" },\n//     \"Student Activity Center\": { lat: 14.338203, lng: 78.540398, type: \"Recreational\", hours: \"9AM–5PM\", description: \" Campus venue for student initiatives, cultural programs, and club activities\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \" Spiritual place for religious observance and peaceful reflection.\" },\n\n//   };\n\n//   // Function to handle live location\n//   const handleLiveLocation = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const { latitude, longitude } = position.coords;\n//           const userLocation = [latitude, longitude]\n//           setPosition([latitude, longitude]);\n\n//           // Set the map view to the user's location with maximum zoom\n//           mapRef.current?.setView(userLocation, mapRef.current.getMaxZoom());\n\n//           // Optionally, add a marker at the user's location\n//           L.marker(userLocation)\n//             .addTo(mapRef.current)\n//             .bindPopup(\"📍 You are here!\")\n//             .openPopup();\n//         },\n//         (error) => {\n//           alert(\"Unable to retrieve your location. Please enable location services.\");\n//           console.error(error);\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by your browser.\");\n//     }\n//   };\n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n//   // Function to filter locations based on search query\n//   const filterSuggestions = (query) => {\n//     const lowerQuery = query.toLowerCase();\n//     const filtered = Object.keys(customLocations) // Only get the names of locations\n//       .filter(name => name.toLowerCase().includes(lowerQuery)) // Filter by name match\n//       .map(name => ({ name })); // Map to just name for suggestions\n\n//     setSuggestions(filtered);\n//   };\n\n//   const handleSearchChange = (e) => {\n//     const query = e.target.value;\n//     setSearchQuery(query); // Update search query\n//     filterSuggestions(query); // Update suggestions based on query\n//   };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.href = \"/login\";\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     // Ensure map is initialized before attempting to open a popup\n//     if (mapRef.current) {\n//       // Show popup with block details\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//       <div>\n//          <h3>${name}</h3>\n//          <p><strong>Type:</strong> ${type}</p>\n//          <p><strong>Hours:</strong> ${hours}</p>\n//          <p><strong>Description:</strong> ${description}</p>\n//        </div>\n//      `;\n\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n\n//     <div style={{ height: \"100vh\", width: \"100vw\", position: \"relative\" }}>\n//       {/* Sidebar */}\n//       <Navbar />\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1000,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       {/* Navbar */}\n//       {/* <div style={{\n//   position: \"fixed\",\n//   top: 0,\n//   left: 0,\n//   width: \"100%\",\n//   backgroundColor: \"#2c3e50\",\n//   color: \"#ecf0f1\",\n//   padding: \"12px 24px\",\n//   fontSize: \"20px\",\n//   fontWeight: \"bold\",\n//   display: \"flex\",\n//   justifyContent: \"space-between\",\n//   alignItems: \"center\",\n//   zIndex: 2000,\n//   boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.2)\"\n// }}>\n//    <div className=\"navbar-left\">\n//         <img src=\"logo.jpg\" alt=\"Campus Logo\" className=\"navbar-logo\" />\n//         <span className=\"navbar-title\"></span>\n//       </div>\n//   <span style={{ whiteSpace: \"nowrap\" }}>Campus Navigation</span>\n//   <div style={{ height: '35px',width:'40px', marginRight:0,\n//         color: \"#fff\",\n//         border: \"none\",\n//         borderRadius: \"6px\",\n//         padding: \"8px 16px\",\n//         cursor: \"pointer\",\n//         fontSize: \"14px\",\n//         fontWeight: \"bold\"}}>\n//   <Link to=\"/photos\" >Photos</Link>\n// </div>\n//   <button\n//     onClick={handleLogout}\n//     style={{\n//       backgroundColor: \"#e74c3c\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       borderRadius: \"6px\",\n//       padding: \"8px 16px\",\n//       cursor: \"pointer\",\n//       fontSize: \"14px\",\n//       fontWeight: \"bold\"\n//     }}\n//   >\n//     Logout\n//   </button>\n// </div> */}\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       <button\n//         onClick={handleLiveLocation}\n//         style={{\n//           position: \"fixed\",\n//           right: 10,\n//           bottom: 40,\n//           zIndex: 1001,\n//           background: \"#28a745\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         📍 Live Location\n//       </button>\n\n//       {/* Input Bar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 10,\n//         left: \"50%\",\n//         transform: \"translateX(-50%)\",\n//         zIndex: 1000,\n//         display: \"flex\",\n//         gap: \"8px\",\n//         background: \"#fff\",\n//         padding: \"10px\",\n//         borderRadius: \"8px\",\n//         marginTop: \"70px\",\n//         boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n//       }}>\n//         {/* <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => setSourceText(e.target.value)}\n//     onFocus={() => filterSuggestions(sourceText)} // Ensure filtering happens on focus\n\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => setDestinationText(e.target.value)}\n//     onFocus={() => filterSuggestions(destinationText)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   /> */}\n//         <input\n//           type=\"text\"\n//           placeholder=\"Source (e.g., Library)\"\n//           value={sourceText}\n//           onChange={(e) => {\n//             setSourceText(e.target.value);\n//             setSearchQuery(e.target.value); // Update searchQuery to show suggestions\n//             filterSuggestions(e.target.value);\n//           }}\n//           onFocus={() => setActiveInput('source')} // SET ACTIVE INPUT\n//           style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//         />\n\n//         <input\n//           type=\"text\"\n//           placeholder=\"Destination (e.g., CSE Block)\"\n//           value={destinationText}\n//           onChange={(e) => {\n//             setDestinationText(e.target.value);\n//             setSearchQuery(e.target.value);\n//             filterSuggestions(e.target.value);\n//           }}\n//           onFocus={() => setActiveInput('destination')} // SET ACTIVE INPUT\n//           style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//         />\n//         {/* Travel Mode Dropdown */}\n//         <select\n//           value={travelMode}\n//           onChange={(e) => setTravelMode(e.target.value)}\n//           style={{\n//             padding: \"6px 10px\",\n//             fontSize: \"14px\",\n//             borderRadius: \"6px\",\n//             border: \"1px solid #ccc\",\n//             background: \"#fff\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           <option value=\"walk\">🚶 Walk</option>\n//           <option value=\"bicycle\">🚴 Bicycle</option>\n//           <option value=\"vehicle\">🚗 Vehicle</option>\n//         </select>\n\n//         <button\n//           onClick={handleRoute}\n//           style={{\n//             background: \"#28a745\",\n//             color: \"#fff\",\n//             border: \"none\",\n//             padding: \"6px 10px\",\n//             fontSize: \"14px\",\n//             borderRadius: \"6px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           Route\n//         </button>\n//         {/* <div className=\"photos-link\">\n//          <Link to=\"/photos\">Photos</Link>\n//        </div> */}\n\n//       </div>\n\n//       {/* Search Suggestions */}\n//       {searchQuery && suggestions.length > 0 && (\n//         <ul\n//           style={{\n//             position: \"absolute\",\n//             top: 60,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#fff\",\n//             width: \"300px\",\n//             maxHeight: \"150px\",\n//             overflowY: \"auto\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//             zIndex: 1000,\n//             listStyle: \"none\",\n//             padding: 0,\n//             margin: 0,\n//             marginTop: \"70px\",\n//             borderRadius: \"8px\",\n//           }}\n//         >\n//           {suggestions.map((suggestion, index) => {\n//             return (\n//               <li\n//                 key={index}\n//                 onClick={() => {\n//                   if (activeInput === 'source') {\n//                     setSourceText(suggestion.name);\n//                   } else if (activeInput === 'destination') {\n//                     setDestinationText(suggestion.name);\n//                   }\n//                   setSuggestions([]);\n//                   setSearchQuery('');\n//                 }}\n//                 style={{\n//                   padding: \"8px\",\n//                   cursor: \"pointer\",\n//                   backgroundColor: \"#f1f1f1\",\n//                   borderBottom: \"1px solid #ddd\"\n//                 }}\n//               >\n//                 {suggestion.name}\n//               </li>\n\n//             );\n//           })}\n//         </ul>\n//       )}\n\n//       {/* Map */}\n//       <MapContainer\n\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n\n//           compass.addTo(mapRef.current);\n//         }}\n\n//       >\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//           // url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n//           // attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n//         />\n\n//         {/* Marker for Live Location */}\n//         {position && (\n//           <Marker position={position}>\n//             <Popup>\n//               <div>\n//                 <p><strong>You are here!</strong></p>\n//                 <p>{address}</p>\n//                 <button\n//                   onClick={handleLiveLocation}\n//                   style={{\n//                     background: \"#007bff\",\n//                     color: \"#fff\",\n//                     border: \"none\",\n//                     padding: \"5px 10px\",\n//                     borderRadius: \"5px\",\n//                     cursor: \"pointer\"\n//                   }}\n//                 >\n//                   Update Location\n//                 </button>\n//               </div>\n//             </Popup>\n//           </Marker>\n//         )}\n\n//         <LayersControl position=\"topright\">\n//           <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n//             <TileLayer\n//               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//             />\n//           </LayersControl.BaseLayer>\n\n//           <LayersControl.BaseLayer name=\"Satellite View\">\n//             <TileLayer\n//               attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//               url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//             />\n//           </LayersControl.BaseLayer>\n//         </LayersControl>\n\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//     </div>\n//   );\n// };\n\n// export default MapPage;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import { MapContainer, TileLayer, useMap, LayersControl, Marker, Popup } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// import Navbar from './Navbar'; // Adjust the path if needed\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n\n// // Default Leaflet marker icon for consistent rendering\n// let DefaultIcon = L.icon({\n//   iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n//   shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',\n//   iconSize: [25, 41], // Ensure marker size is appropriate\n//   iconAnchor: [12, 41], // Anchor point for precise positioning\n//   popupAnchor: [1, -34], // Popup position relative to marker\n//   shadowSize: [41, 41]\n// });\n// L.Marker.prototype.options.icon = DefaultIcon;\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n//     if (!map) return;\n//     if (mapRef.current) {\n//       const compass = new L.Control.Compass({\n//         autoActive: true,\n//         showDigit: true,\n//       });\n//       compass.addTo(mapRef.current);\n//     }\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 180,\n//             left: \"50%\",\n\n//             transform: distance ? \"translate(-50%, 0)\" : \"translate(-50%, -20px)\", \n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`}   |  \n//           ⏱ Time: {duration} min\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(false);\n//   const [position, setPosition] = useState(null);\n//   const [address, setAddress] = useState(\"Fetching address...\");\n//   const [activeInput, setActiveInput] = useState(null);\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n//   const liveMarkerRef = useRef(null);\n//   const [showSearchBar, setShowSearchBar] = useState(false); \n//   const [loadingLocation, setLoadingLocation] = useState(false);\n//   const customLocations = {\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223, type: \"Academic\", hours: \"9AM–10PM\", description: \"Centralized building with classrooms, seminar halls, and faculty offices for academic activities\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779, type: \"Academic\", hours: \"9AM–10PM\", description: \"Administrative and teaching space for various departmental operations and academic sessions\" },\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720, type: \"Hostel\", hours: \"24x7\", description: \"On-campus residential block for male students with secure lodging and basic amenities\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234, type: \"Hostel\", hours: \"24x7\", description: \"Well-facilitated hostel for male students offering comfort, security, and communal living\" },\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505, type: \"Department\", hours: \"9AM–5PM\", description: \"Dedicated facility for chemical engineering studies, including research and lab-based learning.\" },\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514, type: \"Department\", hours: \"9AM–5PM\", description: \"Engineering block supporting civil engineering courses, design labs, and project spaces\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–5PM\", description: \"Central computing facility with computer labs and high-speed internet resources.\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering providing academic and technical infrastructure\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering offering labs and classrooms\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electrical and Electronics Engineering supporting circuits, machines, and power systems\" },\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students with safety and residential services.\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Residential facility for girl students with necessary hostel amenities.\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652, type: \"Guest facility\", hours: \"24x7\", description: \"Well-maintained guest house for hosting visiting faculty, guests, and dignitaries.\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"24x7 medical facility for basic healthcare and emergency services on campus\" },\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791, type: \"Administration\", hours: \"9AM–5PM\", description: \"Institutional cell responsible for maintaining and enhancing academic quality\" },\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152, type: \"Department\", hours: \"9AM–5PM\", description: \"Lab facility used by multiple departments for academic experiments and practical sessions\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775, type: \"Laundry\", hours: \"9AM–5PM\", description: \"Laundry service center for washing and drying hostel students’ clothes.\" },\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"7AM–11PM\", description: \"Central resource hub with a wide collection of books, journals, and study spaces.\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480, type: \"Religious\", hours: \"9AM–7PM\", description: \"Place of worship for Muslim students and staff within the campus.\" },\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Mechanical Engineering equipped for academic and technical training.\" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661, type: \"Department\", hours: \"9AM–5PM\", description: \"Workshop with tools and machinery for mechanical hands-on training and fabrication\" },\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477, type: \"Food\", hours: \"7AM–9PM\", description: \"Dining hall serving meals to students with regular breakfast, lunch, and dinner\" },\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701, type: \"Food\", hours: \"7AM–9PM\", description: \"Catering facility providing nutritious food to hostel residents and students.\" },\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Metallurgical and Materials Engineering for academic and research purposes\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776, type: \"Academic\", hours: \"9AM–5PM\", description: \"Academic buildings from the original campus supporting multiple disciplines\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592, type: \"Hostel\", hours: \"24x7\", description: \"Boys’ hostel located in the older section of the campus with residential facilities.\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896, type: \"Hostel\", hours: \"24x7\", description: \"Another boys’ hostel in the old campus with accommodation services.\" },\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744, type: \"Hostel\", hours: \"24x7\", description: \"Girls’ hostel located in the old campus area offering safe living spaces.\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914, type: \"Hostel\", hours: \"24x7\", description: \"Second girls’ hostel from the old block, supporting student housing.\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249, type: \"Security\", hours: \"24x7\", description: \"Campus law enforcement unit ensuring discipline, emergency handling, and general safety.\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Postal unit on campus for sending letters, parcels, and accessing courier services.\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465, type: \"Utility\", hours: \"9AM–5PM\", description: \"Electricity management center responsible for power regulation and backup systems.\" },\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874, type: \"Play\", hours: \"6AM-8PM\", description: \"Multipurpose playground for sports practices, matches, and college-level tournaments.\" },\n//     \"SBI\": { lat: 14.337374, lng: 78.534579, type: \"Bank\", hours: \"9AM–5PM\", description: \"Banking facility providing financial services including ATM, account handling, and transactions\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Commercial area within campus for everyday shopping, snacks, and general items\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Indoor and outdoor sports facilities including courts, tracks, and fitness zones.\" },\n//     \"Student Activity Center\": { lat: 14.338203, lng: 78.540398, type: \"Recreational\", hours: \"9AM–5PM\", description: \"Campus venue for student initiatives, cultural programs, and club activities\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \"Spiritual place for religious observance and peaceful reflection.\" },\n//   };\n\n//   // Fetch live location with high accuracy\n//   // useEffect(() => {\n//   //   if (navigator.geolocation) {\n//   //     navigator.geolocation.getCurrentPosition(\n//   //       (location) => {\n//   //         const { latitude, longitude } = location.coords;\n//   //         console.log(\"Live location fetched:\", { latitude, longitude }); // Debug log\n//   //         setPosition([latitude, longitude]);\n//   //         fetchAddress(latitude, longitude);\n//   //         mapRef.current?.setView([latitude, longitude], 18); // Center map on live location\n//   //       },\n//   //       (error) => {\n//   //         console.error(\"Error fetching live location:\", error);\n//   //         setAddress(\"Unable to retrieve location. Try enabling GPS.\");\n//   //         setPosition([rkValley.lat, rkValley.lng]);\n//   //         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//   //       },\n//   //       {\n//   //         enableHighAccuracy: true, // Prioritize GPS\n//   //         timeout: 10000, // 10-second timeout\n//   //         maximumAge: 0 // No cached position\n//   //       }\n//   //     );\n//   //   } else {\n//   //     console.error(\"Geolocation not supported\");\n//   //     setAddress(\"Geolocation not supported\");\n//   //     setPosition([rkValley.lat, rkValley.lng]);\n//   //     alert(\"Geolocation is not supported by your browser. Please select a location from the sidebar.\");\n//   //   }\n//   // }, []);\n\n//   //watching live location \n//   // useEffect(() => {\n//   //   let watchId;\n//   //   let marker = null;\n\n//   //   if (navigator.geolocation) {\n//   //     watchId = navigator.geolocation.watchPosition(\n//   //       (location) => {\n//   //         const { latitude, longitude } = location.coords;\n//   //         const newPosition = [latitude, longitude];\n//   //         console.log(\"Live location updated:\", { latitude, longitude }); // Debug log\n\n//   //         setPosition(newPosition);\n//   //         fetchAddress(latitude, longitude);\n\n//   //         if (mapRef.current) {\n//   //           if (!marker) {\n//   //             // If marker doesn't exist, create it\n//   //             marker = L.marker(newPosition, { \n//   //               icon: L.icon({\n//   //                 iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // You can replace with your own icon URL\n//   //                 iconSize: [30, 30],\n//   //                 iconAnchor: [15, 30]\n//   //               })\n//   //             }).addTo(mapRef.current);\n//   //           } else {\n//   //             // Animate marker moving\n//   //             marker.setLatLng(newPosition);\n//   //           }\n\n//   //           mapRef.current.setView(newPosition, 18, { animate: true, pan: { duration: 1 } });\n//   //         }\n//   //       },\n//   //       (error) => {\n//   //         console.error(\"Error fetching live location:\", error);\n//   //         setAddress(\"Unable to retrieve location. Try enabling GPS.\");\n//   //         setPosition([rkValley.lat, rkValley.lng]);\n//   //         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//   //       },\n//   //       {\n//   //         enableHighAccuracy: true, // Prioritize GPS\n//   //         timeout: 10000, // 10-second timeout\n//   //         maximumAge: 0 // No cached position\n//   //       }\n//   //     );\n//   //   } else {\n//   //     console.error(\"Geolocation not supported\");\n//   //     setAddress(\"Geolocation not supported\");\n//   //     setPosition([rkValley.lat, rkValley.lng]);\n//   //     alert(\"Geolocation is not supported by your browser. Please select a location from the sidebar.\");\n//   //   }\n\n//   //   // Cleanup\n//   //   return () => {\n//   //     if (watchId) {\n//   //       navigator.geolocation.clearWatch(watchId);\n//   //     }\n//   //     if (marker && mapRef.current) {\n//   //       mapRef.current.removeLayer(marker);\n//   //     }\n//   //   };\n//   // }, []);\n\n//   //change \n//   useEffect(() => {\n//     let watchId;\n\n//     if (navigator.geolocation) {\n//       watchId = navigator.geolocation.watchPosition(\n//         (location) => {\n//           const { latitude, longitude } = location.coords;\n//           const newPosition = [latitude, longitude];\n//           console.log(\"Live location updated:\", { latitude, longitude }); // Debug log\n\n//           setPosition(newPosition);\n//           fetchAddress(latitude, longitude);\n\n//           if (mapRef.current) {\n//             if (!liveMarkerRef.current) {\n//               // Create marker only ONCE\n//               liveMarkerRef.current = L.marker(newPosition, {\n//                 icon: L.icon({\n//                   iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // your icon\n//                   iconSize: [30, 30],\n//                   iconAnchor: [15, 30],\n//                 })\n//               }).addTo(mapRef.current);\n//             } else {\n//               // Just move the existing marker\n//               liveMarkerRef.current.setLatLng(newPosition);\n//             }\n\n//             // Smoothly move the map center\n//             mapRef.current.setView(newPosition, 18, { animate: true, pan: { duration: 1 } });\n//           }\n//         },\n//         (error) => {\n//           console.error(\"Error fetching live location:\", error);\n//           setAddress(\"Unable to retrieve location. Try enabling GPS.\");\n//           setPosition([rkValley.lat, rkValley.lng]);\n//           alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//         },\n//         {\n//           enableHighAccuracy: true,\n//           timeout: 10000,\n//           maximumAge: 0\n//         }\n//       );\n//     } else {\n//       console.error(\"Geolocation not supported\");\n//       setAddress(\"Geolocation not supported\");\n//       setPosition([rkValley.lat, rkValley.lng]);\n//       alert(\"Geolocation is not supported by your browser. Please select a location from the sidebar.\");\n//     }\n\n//     return () => {\n//       if (watchId) {\n//         navigator.geolocation.clearWatch(watchId);\n//       }\n//       if (liveMarkerRef.current && mapRef.current) {\n//         mapRef.current.removeLayer(liveMarkerRef.current);\n//         liveMarkerRef.current = null;\n//       }\n//     };\n//   }, []);\n\n//   // Reverse geocoding function\n//   const fetchAddress = async (lat, lng) => {\n//     try {\n//       const response = await fetch(\n//         `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`\n//       );\n//       const data = await response.json();\n//       console.log(\"Reverse geocoding result:\", data); // Debug log\n//       setAddress(data.display_name || \"Address not found\");\n//     } catch (error) {\n//       console.error(\"Error fetching address:\", error);\n//       setAddress(\"Address not available\");\n//     }\n//   };\n\n//   // Handle live location button click\n//   // const handleLiveLocation = () => {\n//   //   if (navigator.geolocation) {\n//   //     navigator.geolocation.getCurrentPosition(\n//   //       (location) => {\n//   //         const { latitude, longitude } = location.coords;\n//   //         console.log(\"Live location updated:\", { latitude, longitude });\n\n//   //         const newPosition = [latitude, longitude];\n//   //         setPosition(newPosition);\n//   //         fetchAddress(latitude, longitude);\n\n//   //         if (mapRef.current) {\n//   //           mapRef.current.setView(newPosition, 18, { animate: true });\n\n//   //           // Move the existing live marker (not create a new one)\n//   //           if (liveMarkerRef.current) {\n//   //             liveMarkerRef.current.setLatLng(newPosition);\n//   //           }\n//   //         }\n//   //       },\n//   //       (error) => {\n//   //         console.error(\"Error fetching live location:\", error);\n//   //         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//   //       },\n//   //       {\n//   //         enableHighAccuracy: true,\n//   //         timeout: 10000,\n//   //         maximumAge: 0\n//   //       }\n//   //     );\n//   //   } else {\n//   //     alert(\"Geolocation is not supported by your browser.\");\n//   //   }\n//   // };\n//   const handleLiveLocation = () => {\n//   if (navigator.geolocation) {\n//     setLoadingLocation(true); // ⭐ Start loading\n//     navigator.geolocation.getCurrentPosition(\n//       (location) => {\n//         const { latitude, longitude } = location.coords;\n//         console.log(\"Live location updated:\", { latitude, longitude });\n\n//         const newPosition = [latitude, longitude];\n//         setPosition(newPosition);\n//         fetchAddress(latitude, longitude);\n\n//         if (mapRef.current) {\n//           mapRef.current.setView(newPosition, 18, { animate: true });\n\n//           if (liveMarkerRef.current) {\n//             liveMarkerRef.current.setLatLng(newPosition);\n//           }\n//         }\n\n//         setLoadingLocation(false); // ⭐ Stop loading after update\n//       },\n//       (error) => {\n//         console.error(\"Error fetching live location:\", error);\n//         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//         setLoadingLocation(false); // ⭐ Stop loading even if error\n//       },\n//       {\n//         enableHighAccuracy: true,\n//         timeout: 10000,\n//         maximumAge: 0,\n//       }\n//     );\n//   } else {\n//     alert(\"Geolocation is not supported by your browser.\");\n//   }\n// };\n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n//   const filterSuggestions = (query) => {\n//     const lowerQuery = query.toLowerCase();\n//     const filtered = Object.keys(customLocations)\n//       .filter(name => name.toLowerCase().includes(lowerQuery))\n//       .map(name => ({ name }));\n//     setSuggestions(filtered);\n//   };\n\n//   // const handleSearchChange = (e) => {\n//   //   const query = e.target.value;\n//   //   setSearchQuery(query);\n//   //   filterSuggestions(query);\n//   // };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//     setShowSearchBar(false);\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     if (mapRef.current) {\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//         <div>\n//           <h3>${name}</h3>\n//           <p><strong>Type:</strong> ${type}</p>\n//           <p><strong>Hours:</strong> ${hours}</p>\n//           <p><strong>Description:</strong> ${description}</p>\n//         </div>\n//       `;\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\", width: \"100vw\", position: \"relative\" }}>\n//       <Navbar />\n//       {/* Sidebar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1001,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       {/* Live Location Button (Fixed Top-Right) */}\n//       <button\n//         onClick={handleLiveLocation}\n//         style={{\n//           position: \"fixed\",\n//           right: 10,\n//           bottom: 10,\n//           zIndex: 1001,\n//           background: \"#28a745\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\",\n//           fontSize: \"14px\"\n//         }}\n//       >\n//         📍 Live Location\n//       </button>\n\n//       {/* Input Bar */}\n//       {/* <div\n//   style={{\n//     position: \"absolute\",\n//     top: 10,\n//     left: \"50%\",\n//     transform: \"translateX(-50%)\",\n//     zIndex: 1000,\n//     display: \"flex\",\n//     gap: \"8px\",\n//     background: \"#fff\",\n//     padding: \"10px\",\n//     borderRadius: \"8px\",\n//     marginTop: \"70px\",\n//     boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//     flexWrap: \"wrap\",    // ⭐ ADD THIS LINE\n//     justifyContent: \"center\",\n//     width: \"90%\",        // ⭐ Make sure it doesn't overflow on small screen\n//     maxWidth: \"600px\",   // ⭐ Limit it nicely\n//   }}\n// >\n//   <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => {\n//       setSourceText(e.target.value);\n//       setSearchQuery(e.target.value);\n//       filterSuggestions(e.target.value);\n//     }}\n//     onFocus={() => setActiveInput('source')}\n//     style={{\n//       flex: \"1 1 150px\",  // ⭐ Responsive width\n//       padding: \"6px 12px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       minWidth: \"120px\"\n//     }}\n//   />\n\n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => {\n//       setDestinationText(e.target.value);\n//       setSearchQuery(e.target.value);\n//       filterSuggestions(e.target.value);\n//     }}\n//     onFocus={() => setActiveInput('destination')}\n//     style={{\n//       flex: \"1 1 150px\",\n//       padding: \"6px 12px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       minWidth: \"120px\"\n//     }}\n//   />\n\n//   <select\n//     value={travelMode}\n//     onChange={(e) => setTravelMode(e.target.value)}\n//     style={{\n//       flex: \"1 1 100px\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       background: \"#fff\",\n//       cursor: \"pointer\",\n//       minWidth: \"100px\"\n//     }}\n//   >\n//     <option value=\"walk\">🚶 Walk</option>\n//     <option value=\"bicycle\">🚴 Bicycle</option>\n//     <option value=\"vehicle\">🚗 Vehicle</option>\n//   </select>\n\n//   <button\n//     onClick={handleRoute}\n//     style={{\n//       flex: \"0 0 auto\",\n//       background: \"#28a745\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       cursor: \"pointer\",\n//       whiteSpace: \"nowrap\",\n//     }}\n//   >\n//     Route\n//   </button>\n// </div> */}\n\n//     <div style={{ position: \"relative\", zIndex: 1000 }}>\n//       {!showSearchBar && (\n//         <button\n//           onClick={() => setShowSearchBar(true)}\n//           style={{\n//             position: \"absolute\",\n//             top: 10,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n\n//             background: \"#007bff\",\n//             color: \"#fff\",\n//             border: \"none\",\n//             padding: \"8px 16px\",\n//             fontSize: \"16px\",\n//             borderRadius: \"8px\",\n//             cursor: \"pointer\",\n//             marginTop: \"70px\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           Search\n//         </button>\n//       )}\n\n//       {showSearchBar && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 10,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             display: \"flex\",\n//             gap: \"8px\",\n//             background: \"#fff\",\n//             padding: \"10px\",\n//             borderRadius: \"8px\",\n//             marginTop: \"70px\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//             flexWrap: \"wrap\",\n//             justifyContent: \"center\",\n//             width: \"90%\",\n//             maxWidth: \"600px\",\n//           }}\n//         >\n//           <input\n//             type=\"text\"\n//             placeholder=\"Source (e.g., Library)\"\n//             value={sourceText}\n//             onChange={(e) => {\n//               setSourceText(e.target.value);\n//               setSearchQuery(e.target.value);\n//               filterSuggestions(e.target.value);\n//             }}\n//             onFocus={() => setActiveInput('source')}\n//             style={{\n//               flex: \"1 1 150px\",\n//               padding: \"6px 12px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               border: \"1px solid #ccc\",\n//               minWidth: \"120px\",\n//             }}\n//           />\n\n//           <input\n//             type=\"text\"\n//             placeholder=\"Destination (e.g., CSE Block)\"\n//             value={destinationText}\n//             onChange={(e) => {\n//               setDestinationText(e.target.value);\n//               setSearchQuery(e.target.value);\n//               filterSuggestions(e.target.value);\n//             }}\n//             onFocus={() => setActiveInput('destination')}\n//             style={{\n//               flex: \"1 1 150px\",\n//               padding: \"6px 12px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               border: \"1px solid #ccc\",\n//               minWidth: \"120px\",\n//             }}\n//           />\n\n//           <select\n//             value={travelMode}\n//             onChange={(e) => setTravelMode(e.target.value)}\n//             style={{\n//               flex: \"1 1 100px\",\n//               padding: \"6px 10px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               border: \"1px solid #ccc\",\n//               background: \"#fff\",\n//               cursor: \"pointer\",\n//               minWidth: \"100px\",\n//             }}\n//           >\n//             <option value=\"walk\">🚶 Walk</option>\n//             <option value=\"bicycle\">🚴 Bicycle</option>\n//             <option value=\"vehicle\">🚗 Vehicle</option>\n//           </select>\n\n//           <button\n//             onClick={handleRoute}\n//             style={{\n//               flex: \"0 0 auto\",\n//               background: \"#28a745\",\n//               color: \"#fff\",\n//               border: \"none\",\n//               padding: \"6px 10px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               cursor: \"pointer\",\n//               whiteSpace: \"nowrap\",\n//             }}\n//           >\n//             Route\n//           </button>\n//         </div>\n//       )}\n//     </div>\n\n//       {/* Search Suggestions */}\n//       {searchQuery && suggestions.length > 0 && (\n//         <ul\n//           style={{\n//             position: \"absolute\",\n//             top: 60,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#fff\",\n//             width: \"300px\",\n//             maxHeight: \"150px\",\n//             overflowY: \"auto\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//             zIndex: 1000,\n//             listStyle: \"none\",\n//             padding: 0,\n//             margin: 0,\n//             marginTop: \"70px\",\n//             borderRadius: \"8px\",\n//           }}\n//         >\n//           {suggestions.map((suggestion, index) => (\n//             <li\n//               key={index}\n//               onClick={() => {\n//                 if (activeInput === 'source') {\n//                   setSourceText(suggestion.name);\n//                 } else if (activeInput === 'destination') {\n//                   setDestinationText(suggestion.name);\n//                 }\n//                 setSuggestions([]);\n//                 setSearchQuery('');\n//               }}\n//               style={{\n//                 padding: \"8px\",\n//                 cursor: \"pointer\",\n//                 backgroundColor: \"#f1f1f1\",\n//                 borderBottom: \"1px solid #ddd\"\n//               }}\n//             >\n//               {suggestion.name}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {/* Map */}\n//       <MapContainer\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n//           compass.addTo(mapRef.current);\n//         }}\n//       >\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//         />\n//         {position && (\n//           <Marker position={position}>\n//             <Popup>\n//               <div>\n//                 <p><strong>You are here!</strong></p>\n//                 <p>{address}</p>\n//                 <button\n//                   onClick={handleLiveLocation}\n//                   style={{\n//                     background: \"#007bff\",\n//                     color: \"#fff\",\n//                     border: \"none\",\n//                     padding: \"5px 10px\",\n//                     borderRadius: \"5px\",\n//                     cursor: \"pointer\"\n//                   }}\n//                 >\n//                   Update Location\n//                 </button>\n//                 <p style={{ marginTop: \"10px\", fontSize: \"12px\" }}>\n//                   Not at RGUKT RK Valley? Ensure GPS is enabled or select a location from the sidebar.\n//                 </p>\n//               </div>\n//             </Popup>\n//           </Marker>\n//         )}\n//         <LayersControl position=\"topright\">\n//           <LayersControl.BaseLayer name=\"OpenStreetMap\">\n//             <TileLayer\n//               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//             />\n//           </LayersControl.BaseLayer>\n//           <LayersControl.BaseLayer checked  name=\"Satellite View\">\n//             <TileLayer\n//               attribution='Tiles © Esri — Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//               url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//             />\n//           </LayersControl.BaseLayer>\n//         </LayersControl>\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//     </div>\n//   );\n// };\n\n// export default MapPage;","map":{"version":3,"names":[],"sources":["/home/rguktrkvalley/Desktop/CampusNavigationFinal/CampusNavigation/campus-nav-frontend/src/pages/Map.js"],"sourcesContent":["// import React from \"react\"\n// import { Link } from 'react-router-dom';\n// import  { useEffect, useRef, useState } from \"react\";\n// import { MapContainer, TileLayer, useMap, LayersControl } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// //import Fuse from \"fuse.js\";\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n// //import { Link } from 'react-router-dom';\n\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n\n\n//     if (!map) return;\n//     if (!mapRef.current) return;\n\n//     // Initialize and add the compass control\n//     const compass = new L.Control.Compass({\n//       autoActive: true,\n//       showDigit: true,\n//     });\n//     map.addControl(compass);\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 70,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`} &nbsp; | &nbsp;\n//           ⏱ Time: {duration} min\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\n\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n\n\n//   const customLocations = {\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"9AM–6PM\", description: \"A place for study and research\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Place for shopping and dining\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"Emergency medical services\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \"Place of worship\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Sports facilities\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–7PM\", description: \"Computer labs and resources\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Place to send and receive\" },\n\n//     // \"Library\": { lat: 14.335461, lng: 78.538369 ,type:\"study\",description:\"Consists of many resources to refer and a place where we can study peacefully\"},\n//     // \"CSE Block\": { lat: 14.336241, lng: 78.541992,type:\"Department\",description:\"Department of Computer Science and Engineering\"},\n//     // \"ECE Block\": { lat: 14.334558, lng: 78.541885 ,type:\"Department\",description:\"Department of Electronics and Communication Engineering\"},\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188,type:\"Department\",hours:\"\",description:\"Department of Metallurgical and Materials Engineering\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395,type:\"Department\",description:\"Department of Electrical and Electronics Engineering\" },\n\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308 ,type:\"Department\",description:\"Department of Mechanical Engineering\"},\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505 ,type:\"Department\",description:\"Department of Chemical Engineering\"},\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514,type:\"\",description:\"Department of Civil Engineering\" },\n\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223,type:\"\",description:\"\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779 ,type:\"Department\",description:\"\"},\n\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412,type:\"Hostel\",description:\"Accomodation for female students\" },\n\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720,type:\"Hostel\",description:\"Accomodation for male students\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234,type:\"Hostel\",description:\"Accomodation for male students\" },\n\n\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152,type:\"Department\",description:\"place \" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661,type:\"\",description:\"\" },\n\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791,type:\"\",description:\"\" },\n//    \"Student Activity Center\": { lat: 14.338203, lng: 78.540398,type:\"\",description:\"\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465,type:\"\",description:\"\"},\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477 ,type:\"Food\",description:\"\"},\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701 ,type:\"Food\",description:\"\"},\n\n//     \"SBI\": { lat: 14.337374, lng: 78.534579,type:\"Bank\",description:\"\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249,type:\"\",description:\"\"},\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874,type:\"Play\",description:\"\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652 ,type:\"\",description:\"\"},\n\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744,type:\"Hostel\",description:\"\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896,type:\"Hostel\",description:\"\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776,type:\"Academic\",description:\"\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480,type:\"Religious\",description:\"\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775,type:\"Laundry\",description:\"\" },\n\n//   };\n\n\n\n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.href = \"/login\";\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     // Ensure map is initialized before attempting to open a popup\n//     if (mapRef.current) {\n//       // Show popup with block details\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//         <h3>${name}</h3>\n//         <p><strong>Type:</strong> ${type}</p>\n//         <p><strong>Hours:</strong> ${hours}</p>\n//         <p><strong>Description:</strong> ${description}</p>\n//       `;\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n\n//     <div style={{ height: \"100vh\", width: \"100%\", position: \"relative\" }}>\n//       {/* Sidebar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1000,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       {/* Input Bar */}\n//       <div style={{\n//   position: \"absolute\",\n//   top: 10,\n//   left: \"50%\",\n//   transform: \"translateX(-50%)\",\n//   zIndex: 1000,\n//   display: \"flex\",\n//   gap: \"8px\",\n//   background: \"#fff\",\n//   padding: \"10px\",\n//   borderRadius: \"8px\",\n//   boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n// }}>\n//   <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => setSourceText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => setDestinationText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n\n//   {/* Travel Mode Dropdown */}\n//   <select\n//     value={travelMode}\n//     onChange={(e) => setTravelMode(e.target.value)}\n//     style={{\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       background: \"#fff\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     <option value=\"walk\">🚶 Walk</option>\n//     <option value=\"bicycle\">🚴 Bicycle</option>\n//     <option value=\"vehicle\">🚗 Vehicle</option>\n//   </select>\n\n//   <button\n//     onClick={handleRoute}\n//     style={{\n//       background: \"#28a745\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     Route\n//   </button>\n//   <div className=\"photos-link\">\n//         <Link to=\"/photos\">Photos</Link>\n//       </div>\n// </div>\n\n\n\n//       {/* Map */}\n//       <MapContainer\n\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n\n//           compass.addTo(mapRef.current);\n//         }}\n\n\n//       >\n\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//         />\n//       <LayersControl position=\"topright\">\n//   <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n//     <TileLayer\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//     />\n//   </LayersControl.BaseLayer>\n\n//   <LayersControl.BaseLayer name=\"Satellite View\">\n//     <TileLayer\n//       attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//       url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//     />\n//   </LayersControl.BaseLayer>\n// </LayersControl>\n\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//        {/* Logout */}\n//        <button\n//         onClick={handleLogout}\n//         style={{\n//           position: \"absolute\",\n//           right: 10,\n//           bottom: 25,\n//           padding: \"8px 12px\",\n//           background: \"red\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"5px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         Logout\n//       </button>\n//     </div>\n\n//   );\n// };\n\n// export default MapPage;\n\n\n\n\n// import React from \"react\"\n// import { Link } from 'react-router-dom';\n// import  { useEffect, useRef, useState } from \"react\";\n// import { MapContainer, TileLayer, useMap, LayersControl } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// //import Fuse from \"fuse.js\";\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n// //import { Link } from 'react-router-dom';\n\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n\n\n//     if (!map) return;\n//     if (!mapRef.current) return;\n//   const compass = new L.Control.Compass({\n//     autoActive: true,\n//     showDigit: true,\n//   }).addTo(map);\n\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 70,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`}\n\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\n\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n\n\n//   const customLocations = {\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"9AM–6PM\", description: \"A place for study and research\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Place for shopping and dining\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"Emergency medical services\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \"Place of worship\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Sports facilities\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–7PM\", description: \"Computer labs and resources\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Place to send and receive\" },\n\n//     // \"Library\": { lat: 14.335461, lng: 78.538369 ,type:\"study\",description:\"Consists of many resources to refer and a place where we can study peacefully\"},\n//     // \"CSE Block\": { lat: 14.336241, lng: 78.541992,type:\"Department\",description:\"Department of Computer Science and Engineering\"},\n//     // \"ECE Block\": { lat: 14.334558, lng: 78.541885 ,type:\"Department\",description:\"Department of Electronics and Communication Engineering\"},\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188,type:\"Department\",hours:\"\",description:\"Department of Metallurgical and Materials Engineering\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395,type:\"Department\",description:\"Department of Electrical and Electronics Engineering\" },\n\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308 ,type:\"Department\",description:\"Department of Mechanical Engineering\"},\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505 ,type:\"Department\",description:\"Department of Chemical Engineering\"},\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514,type:\"\",description:\"Department of Civil Engineering\" },\n\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223,type:\"\",description:\"\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779 ,type:\"Department\",description:\"\"},\n\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412,type:\"Hostel\",description:\"Accomodation for female students\" },\n\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720,type:\"Hostel\",description:\"Accomodation for male students\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234,type:\"Hostel\",description:\"Accomodation for male students\" },\n\n\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152,type:\"Department\",description:\"place \" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661,type:\"\",description:\"\" },\n\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791,type:\"\",description:\"\" },\n//    \"Student Activity Center\": { lat: 14.338203, lng: 78.540398,type:\"\",description:\"\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465,type:\"\",description:\"\"},\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477 ,type:\"Food\",description:\"\"},\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701 ,type:\"Food\",description:\"\"},\n\n//     \"SBI\": { lat: 14.337374, lng: 78.534579,type:\"Bank\",description:\"\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249,type:\"\",description:\"\"},\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874,type:\"Play\",description:\"\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652 ,type:\"\",description:\"\"},\n\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744,type:\"Hostel\",description:\"\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592,type:\"Hostel\",description:\"\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896,type:\"Hostel\",description:\"\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776,type:\"Academic\",description:\"\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480,type:\"Religious\",description:\"\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775,type:\"Laundry\",description:\"\" },\n\n//   };\n\n\n\n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.href = \"/login\";\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     // Ensure map is initialized before attempting to open a popup\n//     if (mapRef.current) {\n//       // Show popup with block details\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//       <div>\n//         <h3>${name}</h3>\n//         <p><strong>Type:</strong> ${type}</p>\n//         <p><strong>Hours:</strong> ${hours}</p>\n//         <p><strong>Description:</strong> ${description}</p>\n//       </div>\n//     `;\n\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n\n//     <div style={{ height: \"100vh\", width: \"100%\", position: \"relative\" }}>\n//       {/* Sidebar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1000,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       {/* Input Bar */}\n//       <div style={{\n//   position: \"absolute\",\n//   top: 10,\n//   left: \"50%\",\n//   transform: \"translateX(-50%)\",\n//   zIndex: 1000,\n//   display: \"flex\",\n//   gap: \"8px\",\n//   background: \"#fff\",\n//   padding: \"10px\",\n//   borderRadius: \"8px\",\n//   boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n// }}>\n//   <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => setSourceText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => setDestinationText(e.target.value)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n\n//   {/* Travel Mode Dropdown */}\n//   <select\n//     value={travelMode}\n//     onChange={(e) => setTravelMode(e.target.value)}\n//     style={{\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       background: \"#fff\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     <option value=\"walk\">🚶 Walk</option>\n//     <option value=\"bicycle\">🚴 Bicycle</option>\n//     <option value=\"vehicle\">🚗 Vehicle</option>\n//   </select>\n\n//   <button\n//     onClick={handleRoute}\n//     style={{\n//       background: \"#28a745\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     Route\n//   </button>\n//   <div className=\"photos-link\">\n//         <Link to=\"/photos\">Photos</Link>\n//       </div>\n// </div>\n\n\n\n//       {/* Map */}\n//       <MapContainer\n\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n\n//           compass.addTo(mapRef.current);\n//         }}\n\n\n//       >\n\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//         />\n//       <LayersControl position=\"topright\">\n//   <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n//     <TileLayer\n//       url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//     />\n//   </LayersControl.BaseLayer>\n\n//   <LayersControl.BaseLayer name=\"Satellite View\">\n//     <TileLayer\n//       attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//       url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//     />\n//   </LayersControl.BaseLayer>\n// </LayersControl>\n\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//        {/* Logout */}\n//        <button\n//         onClick={handleLogout}\n//         style={{\n//           position: \"absolute\",\n//           right: 10,\n//           bottom: 25,\n//           padding: \"8px 12px\",\n//           background: \"red\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"5px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         Logout\n//       </button>\n//     </div>\n\n//   );\n// };\n\n// export default MapPage;\n\n\n\n\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// //import { Link } from 'react-router-dom';\n// import { MapContainer, TileLayer, useMap, LayersControl, Marker, Popup } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// import Navbar from './Navbar'; // adjust the path if Navbar.js is in a different folder\n// import {GeoSearchControl, OpenStreetMapProvider} from 'leaflet-geosearch';\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n\n// const handleLogout = () => {\n//   localStorage.removeItem(\"token\"); // Or whatever key you're using\n//   window.location.href = \"/login\"; // Adjust if using React Router\n// };\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n//     if (!map) return;\n//     if (mapRef.current) {\n//       const compass = new L.Control.Compass({\n//         autoActive: true,\n//         showDigit: true,\n//       });\n//       compass.addTo(mapRef.current);\n//     }\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 70,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`} &nbsp; | &nbsp;\n//           ⏱ Time: {duration} min\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(true);\n//   const [position, setPosition] = useState(null);\n//   const [address, setAddress] = useState('Fetching Address...')\n\n\n//   const [activeInput, setActiveInput] = useState(null); // NEW: Track which input is focused\n\n\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n\n\n//   const customLocations = {\n\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223, type: \"Academic\", hours: \"9AM–10PM\", description: \"Centralized building with classrooms, seminar halls, and faculty offices for academic activities\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779, type: \"Academic\", hours: \"9AM–10PM\", description: \"Administrative and teaching space for various departmental operations and academic sessions\" },\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720, type: \"Hostel\", hours: \"24x7\", description: \"On-campus residential block for male students with secure lodging and basic amenities\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234, type: \"Hostel\", hours: \"24x7\", description: \"Well-facilitated hostel for male students offering comfort, security, and communal living\" },\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505, type: \"Department\", hours: \"9AM–5PM\", description: \"Dedicated facility for chemical engineering studies, including research and lab-based learning.\" },\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514, type: \"Department\", hours: \"9AM–5PM\", description: \"Engineering block supporting civil engineering courses, design labs, and project spaces\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–5PM\", description: \"Central computing facility with computer labs and high-speed internet resources.\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering providing academic and technical infrastructure\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering offering labs and classrooms\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electrical and Electronics Engineering supporting circuits, machines, and power systems\" },\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students with safety and residential services.\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Residential facility for girl students with necessary hostel amenities.\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652, type: \"Guest facility\", hours: \"24x7\", description: \"Well-maintained guest house for hosting visiting faculty, guests, and dignitaries.\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"24x7 medical facility for basic healthcare and emergency services on campus\" },\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791, type: \"Administration\", hours: \"9AM–5PM\", description: \"Institutional cell responsible for maintaining and enhancing academic quality\" },\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152, type: \"Department\", hours: \"9AM–5PM\", description: \"Lab facility used by multiple departments for academic experiments and practical sessions\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775, type: \"Laundry\", hours: \"9AM–5PM\", description: \"Laundry service center for washing and drying hostel students’ clothes.\" },\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"7AM–11PM\", description: \"Central resource hub with a wide collection of books, journals, and study spaces.\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480, type: \"Religious\", hours: \"9AM–7PM\", description: \"Place of worship for Muslim students and staff within the campus.\" },\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Mechanical Engineering equipped for academic and technical training.\" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661, type: \"Department\", hours: \"9AM–5PM\", description: \"Workshop with tools and machinery for mechanical hands-on training and fabrication\" },\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477, type: \"Food\", hours: \"7AM–9PM\", description: \"Dining hall serving meals to students with regular breakfast, lunch, and dinner\" },\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701, type: \"Food\", hours: \"7AM–9PM\", description: \"Catering facility providing nutritious food to hostel residents and students.\" },\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Metallurgical and Materials Engineering for academic and research purposes\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776, type: \"Academic\", hours: \"9AM–5PM\", description: \"Academic buildings from the original campus supporting multiple disciplines\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592, type: \"Hostel\", hours: \"24x7\", description: \"Boys’ hostel located in the older section of the campus with residential facilities.\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896, type: \"Hostel\", hours: \"24x7\", description: \"Another boys’ hostel in the old campus with accommodation services.\" },\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744, type: \"Hostel\", hours: \"24x7\", description: \"Girls’ hostel located in the old campus area offering safe living spaces.\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914, type: \"Hostel\", hours: \"24x7\", description: \"Second girls’ hostel from the old block, supporting student housing.\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249, type: \"Security\", hours: \"24x7\", description: \"Campus law enforcement unit ensuring discipline, emergency handling, and general safety.\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Postal unit on campus for sending letters, parcels, and accessing courier services.\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465, type: \"Utility\", hours: \"9AM–5PM\", description: \"Electricity management center responsible for power regulation and backup systems.\" },\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874, type: \"Play\", hours: \"6AM-8PM\", description: \"Multipurpose playground for sports practices, matches, and college-level tournaments.\" },\n//     \"SBI\": { lat: 14.337374, lng: 78.534579, type: \"Bank\", hours: \"9AM–5PM\", description: \"Banking facility providing financial services including ATM, account handling, and transactions\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Commercial area within campus for everyday shopping, snacks, and general items\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Indoor and outdoor sports facilities including courts, tracks, and fitness zones.\" },\n//     \"Student Activity Center\": { lat: 14.338203, lng: 78.540398, type: \"Recreational\", hours: \"9AM–5PM\", description: \" Campus venue for student initiatives, cultural programs, and club activities\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \" Spiritual place for religious observance and peaceful reflection.\" },\n\n\n//   };\n  \n//   // Function to handle live location\n//   const handleLiveLocation = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           const { latitude, longitude } = position.coords;\n//           const userLocation = [latitude, longitude]\n//           setPosition([latitude, longitude]);\n\n//           // Set the map view to the user's location with maximum zoom\n//           mapRef.current?.setView(userLocation, mapRef.current.getMaxZoom());\n\n//           // Optionally, add a marker at the user's location\n//           L.marker(userLocation)\n//             .addTo(mapRef.current)\n//             .bindPopup(\"📍 You are here!\")\n//             .openPopup();\n//         },\n//         (error) => {\n//           alert(\"Unable to retrieve your location. Please enable location services.\");\n//           console.error(error);\n//         }\n//       );\n//     } else {\n//       alert(\"Geolocation is not supported by your browser.\");\n//     }\n//   };\n\n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n\n//   // Function to filter locations based on search query\n//   const filterSuggestions = (query) => {\n//     const lowerQuery = query.toLowerCase();\n//     const filtered = Object.keys(customLocations) // Only get the names of locations\n//       .filter(name => name.toLowerCase().includes(lowerQuery)) // Filter by name match\n//       .map(name => ({ name })); // Map to just name for suggestions\n\n//     setSuggestions(filtered);\n//   };\n\n//   const handleSearchChange = (e) => {\n//     const query = e.target.value;\n//     setSearchQuery(query); // Update search query\n//     filterSuggestions(query); // Update suggestions based on query\n//   };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.href = \"/login\";\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     // Ensure map is initialized before attempting to open a popup\n//     if (mapRef.current) {\n//       // Show popup with block details\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//       <div>\n//          <h3>${name}</h3>\n//          <p><strong>Type:</strong> ${type}</p>\n//          <p><strong>Hours:</strong> ${hours}</p>\n//          <p><strong>Description:</strong> ${description}</p>\n//        </div>\n//      `;\n\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n\n//     <div style={{ height: \"100vh\", width: \"100vw\", position: \"relative\" }}>\n//       {/* Sidebar */}\n//       <Navbar />\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1000,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       {/* Navbar */}\n//       {/* <div style={{\n//   position: \"fixed\",\n//   top: 0,\n//   left: 0,\n//   width: \"100%\",\n//   backgroundColor: \"#2c3e50\",\n//   color: \"#ecf0f1\",\n//   padding: \"12px 24px\",\n//   fontSize: \"20px\",\n//   fontWeight: \"bold\",\n//   display: \"flex\",\n//   justifyContent: \"space-between\",\n//   alignItems: \"center\",\n//   zIndex: 2000,\n//   boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.2)\"\n// }}>\n//    <div className=\"navbar-left\">\n//         <img src=\"logo.jpg\" alt=\"Campus Logo\" className=\"navbar-logo\" />\n//         <span className=\"navbar-title\"></span>\n//       </div>\n//   <span style={{ whiteSpace: \"nowrap\" }}>Campus Navigation</span>\n//   <div style={{ height: '35px',width:'40px', marginRight:0,\n//         color: \"#fff\",\n//         border: \"none\",\n//         borderRadius: \"6px\",\n//         padding: \"8px 16px\",\n//         cursor: \"pointer\",\n//         fontSize: \"14px\",\n//         fontWeight: \"bold\"}}>\n//   <Link to=\"/photos\" >Photos</Link>\n// </div>\n//   <button\n//     onClick={handleLogout}\n//     style={{\n//       backgroundColor: \"#e74c3c\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       borderRadius: \"6px\",\n//       padding: \"8px 16px\",\n//       cursor: \"pointer\",\n//       fontSize: \"14px\",\n//       fontWeight: \"bold\"\n//     }}\n//   >\n//     Logout\n//   </button>\n// </div> */}\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       <button\n//         onClick={handleLiveLocation}\n//         style={{\n//           position: \"fixed\",\n//           right: 10,\n//           bottom: 40,\n//           zIndex: 1001,\n//           background: \"#28a745\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         📍 Live Location\n//       </button>\n\n//       {/* Input Bar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 10,\n//         left: \"50%\",\n//         transform: \"translateX(-50%)\",\n//         zIndex: 1000,\n//         display: \"flex\",\n//         gap: \"8px\",\n//         background: \"#fff\",\n//         padding: \"10px\",\n//         borderRadius: \"8px\",\n//         marginTop: \"70px\",\n//         boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n//       }}>\n//         {/* <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => setSourceText(e.target.value)}\n//     onFocus={() => filterSuggestions(sourceText)} // Ensure filtering happens on focus\n   \n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   />\n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => setDestinationText(e.target.value)}\n//     onFocus={() => filterSuggestions(destinationText)}\n//     style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//   /> */}\n//         <input\n//           type=\"text\"\n//           placeholder=\"Source (e.g., Library)\"\n//           value={sourceText}\n//           onChange={(e) => {\n//             setSourceText(e.target.value);\n//             setSearchQuery(e.target.value); // Update searchQuery to show suggestions\n//             filterSuggestions(e.target.value);\n//           }}\n//           onFocus={() => setActiveInput('source')} // SET ACTIVE INPUT\n//           style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//         />\n\n//         <input\n//           type=\"text\"\n//           placeholder=\"Destination (e.g., CSE Block)\"\n//           value={destinationText}\n//           onChange={(e) => {\n//             setDestinationText(e.target.value);\n//             setSearchQuery(e.target.value);\n//             filterSuggestions(e.target.value);\n//           }}\n//           onFocus={() => setActiveInput('destination')} // SET ACTIVE INPUT\n//           style={{ padding: \"6px 12px\", fontSize: \"14px\", borderRadius: \"6px\" }}\n//         />\n//         {/* Travel Mode Dropdown */}\n//         <select\n//           value={travelMode}\n//           onChange={(e) => setTravelMode(e.target.value)}\n//           style={{\n//             padding: \"6px 10px\",\n//             fontSize: \"14px\",\n//             borderRadius: \"6px\",\n//             border: \"1px solid #ccc\",\n//             background: \"#fff\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           <option value=\"walk\">🚶 Walk</option>\n//           <option value=\"bicycle\">🚴 Bicycle</option>\n//           <option value=\"vehicle\">🚗 Vehicle</option>\n//         </select>\n\n//         <button\n//           onClick={handleRoute}\n//           style={{\n//             background: \"#28a745\",\n//             color: \"#fff\",\n//             border: \"none\",\n//             padding: \"6px 10px\",\n//             fontSize: \"14px\",\n//             borderRadius: \"6px\",\n//             cursor: \"pointer\"\n//           }}\n//         >\n//           Route\n//         </button>\n//         {/* <div className=\"photos-link\">\n//          <Link to=\"/photos\">Photos</Link>\n//        </div> */}\n\n\n\n//       </div>\n\n//       {/* Search Suggestions */}\n//       {searchQuery && suggestions.length > 0 && (\n//         <ul\n//           style={{\n//             position: \"absolute\",\n//             top: 60,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#fff\",\n//             width: \"300px\",\n//             maxHeight: \"150px\",\n//             overflowY: \"auto\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//             zIndex: 1000,\n//             listStyle: \"none\",\n//             padding: 0,\n//             margin: 0,\n//             marginTop: \"70px\",\n//             borderRadius: \"8px\",\n//           }}\n//         >\n//           {suggestions.map((suggestion, index) => {\n//             return (\n//               <li\n//                 key={index}\n//                 onClick={() => {\n//                   if (activeInput === 'source') {\n//                     setSourceText(suggestion.name);\n//                   } else if (activeInput === 'destination') {\n//                     setDestinationText(suggestion.name);\n//                   }\n//                   setSuggestions([]);\n//                   setSearchQuery('');\n//                 }}\n//                 style={{\n//                   padding: \"8px\",\n//                   cursor: \"pointer\",\n//                   backgroundColor: \"#f1f1f1\",\n//                   borderBottom: \"1px solid #ddd\"\n//                 }}\n//               >\n//                 {suggestion.name}\n//               </li>\n\n//             );\n//           })}\n//         </ul>\n//       )}\n\n//       {/* Map */}\n//       <MapContainer\n\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n\n//           compass.addTo(mapRef.current);\n//         }}\n\n\n//       >\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//           // url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n//           // attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n//         />\n        \n//         {/* Marker for Live Location */}\n//         {position && (\n//           <Marker position={position}>\n//             <Popup>\n//               <div>\n//                 <p><strong>You are here!</strong></p>\n//                 <p>{address}</p>\n//                 <button\n//                   onClick={handleLiveLocation}\n//                   style={{\n//                     background: \"#007bff\",\n//                     color: \"#fff\",\n//                     border: \"none\",\n//                     padding: \"5px 10px\",\n//                     borderRadius: \"5px\",\n//                     cursor: \"pointer\"\n//                   }}\n//                 >\n//                   Update Location\n//                 </button>\n//               </div>\n//             </Popup>\n//           </Marker>\n//         )}\n\n//         <LayersControl position=\"topright\">\n//           <LayersControl.BaseLayer checked name=\"OpenStreetMap\">\n//             <TileLayer\n//               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//             />\n//           </LayersControl.BaseLayer>\n\n//           <LayersControl.BaseLayer name=\"Satellite View\">\n//             <TileLayer\n//               attribution='Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//               url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//             />\n//           </LayersControl.BaseLayer>\n//         </LayersControl>\n\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//     </div>\n//   );\n// };\n\n// export default MapPage;\n\n// import React, { useEffect, useRef, useState } from \"react\";\n// import { MapContainer, TileLayer, useMap, LayersControl, Marker, Popup } from \"react-leaflet\";\n// import L from \"leaflet\";\n// import \"leaflet/dist/leaflet.css\";\n// import \"leaflet-routing-machine\";\n// import \"leaflet-control-geocoder\";\n// import \"leaflet-compass/dist/leaflet-compass.min.css\";\n// import \"leaflet-compass\";\n// import Navbar from './Navbar'; // Adjust the path if needed\n\n// const rkValley = { lat: 14.33499, lng: 78.537372 };\n\n// // Default Leaflet marker icon for consistent rendering\n// let DefaultIcon = L.icon({\n//   iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',\n//   shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',\n//   iconSize: [25, 41], // Ensure marker size is appropriate\n//   iconAnchor: [12, 41], // Anchor point for precise positioning\n//   popupAnchor: [1, -34], // Popup position relative to marker\n//   shadowSize: [41, 41]\n// });\n// L.Marker.prototype.options.icon = DefaultIcon;\n\n// const RoutingMachine = ({ source, destination, travelMode }) => {\n//   const map = useMap();\n//   const mapRef = useRef(null);\n\n//   const controlRef = useRef(null);\n//   const [distance, setDistance] = useState(null);\n//   const [duration, setDuration] = useState(null);\n\n//   useEffect(() => {\n//     if (!map) return;\n//     if (mapRef.current) {\n//       const compass = new L.Control.Compass({\n//         autoActive: true,\n//         showDigit: true,\n//       });\n//       compass.addTo(mapRef.current);\n//     }\n//     if (!controlRef.current) {\n//       controlRef.current = L.Routing.control({\n//         waypoints: [],\n//         lineOptions: { styles: [{ color: \"blue\", weight: 4 }] },\n//         addWaypoints: false,\n//         draggableWaypoints: false,\n//         fitSelectedRoutes: true,\n//         show: false,\n//         createMarker: () => null,\n//         routeWhileDragging: false,\n//       }).addTo(map);\n//     }\n\n//     if (source && destination) {\n//       controlRef.current.setWaypoints([\n//         L.latLng(source.lat, source.lng),\n//         L.latLng(destination.lat, destination.lng),\n//       ]);\n\n//       controlRef.current.on(\"routesfound\", function (e) {\n//         const route = e.routes[0];\n//         const dist = route.summary.totalDistance;\n\n//         let speedKmph = travelMode === \"bicycle\" ? 15 : travelMode === \"vehicle\" ? 40 : 5;\n//         const timeHours = dist / 1000 / speedKmph;\n//         const timeMinutes = Math.round(timeHours * 60);\n\n//         setDistance(dist);\n//         setDuration(timeMinutes);\n//       });\n//     }\n\n//     return () => {\n//       if (controlRef.current) {\n//         controlRef.current.setWaypoints([]);\n//         setDistance(null);\n//         setDuration(null);\n//       }\n//     };\n//   }, [source, destination, travelMode, map]);\n\n//   return (\n//     <>\n//       {distance && duration !== null && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 180,\n//             left: \"50%\",\n           \n//             transform: distance ? \"translate(-50%, 0)\" : \"translate(-50%, -20px)\", \n//             background: \"#ffffffee\",\n//             padding: \"10px 16px\",\n//             border: \"2px solid #007bff\",\n//             borderRadius: \"10px\",\n//             zIndex: 1000,\n//             fontSize: \"14px\",\n//             fontWeight: \"500\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           🚩 Distance: {distance < 1000 ? `${Math.round(distance)} m` : `${(distance / 1000).toFixed(2)} km`}   |  \n//           ⏱ Time: {duration} min\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// const MapPage = () => {\n//   const [sourceText, setSourceText] = useState(\"\");\n//   const [destinationText, setDestinationText] = useState(\"\");\n//   const [sourceCoords, setSourceCoords] = useState(null);\n//   const [destinationCoords, setDestinationCoords] = useState(null);\n//   const [travelMode, setTravelMode] = useState(\"walk\");\n//   const [sidebarOpen, setSidebarOpen] = useState(false);\n//   const [position, setPosition] = useState(null);\n//   const [address, setAddress] = useState(\"Fetching address...\");\n//   const [activeInput, setActiveInput] = useState(null);\n//   const geocoder = useRef(L.Control.Geocoder.nominatim());\n//   const mapRef = useRef(null);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [suggestions, setSuggestions] = useState([]);\n//   const liveMarkerRef = useRef(null);\n//   const [showSearchBar, setShowSearchBar] = useState(false); \n//   const [loadingLocation, setLoadingLocation] = useState(false);\n//   const customLocations = {\n//     \"Academic Block 1\": { lat: 14.334841, lng: 78.537223, type: \"Academic\", hours: \"9AM–10PM\", description: \"Centralized building with classrooms, seminar halls, and faculty offices for academic activities\" },\n//     \"Academic Block 2\": { lat: 14.335089, lng: 78.539779, type: \"Academic\", hours: \"9AM–10PM\", description: \"Administrative and teaching space for various departmental operations and academic sessions\" },\n//     \"Boys Hostel 1\": { lat: 14.334589, lng: 78.536720, type: \"Hostel\", hours: \"24x7\", description: \"On-campus residential block for male students with secure lodging and basic amenities\" },\n//     \"Boys Hostel 2\": { lat: 14.334773, lng: 78.540234, type: \"Hostel\", hours: \"24x7\", description: \"Well-facilitated hostel for male students offering comfort, security, and communal living\" },\n//     \"Chemical Block\": { lat: 14.335304, lng: 78.542505, type: \"Department\", hours: \"9AM–5PM\", description: \"Dedicated facility for chemical engineering studies, including research and lab-based learning.\" },\n//     \"Civil Block\": { lat: 14.334801, lng: 78.543514, type: \"Department\", hours: \"9AM–5PM\", description: \"Engineering block supporting civil engineering courses, design labs, and project spaces\" },\n//     \"Computer Center\": { lat: 14.336182, lng: 78.539610, type: \"Tech\", hours: \"9AM–5PM\", description: \"Central computing facility with computer labs and high-speed internet resources.\" },\n//     \"CSE Block\": { lat: 14.335914, lng: 78.541347, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Computer Science and Engineering providing academic and technical infrastructure\" },\n//     \"ECE Block\": { lat: 14.334283, lng: 78.541474, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electronics and Communication Engineering offering labs and classrooms\" },\n//     \"EEE Block\": { lat: 14.336851, lng: 78.542395, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Electrical and Electronics Engineering supporting circuits, machines, and power systems\" },\n//     \"Girls Hostel 1\": { lat: 14.334402, lng: 78.538412, type: \"Hostel\", hours: \"24x7\", description: \"Accommodation for female students with safety and residential services.\" },\n//     \"Girls Hostel 2\": { lat: 14.334361, lng: 78.538610, type: \"Hostel\", hours: \"24x7\", description: \"Residential facility for girl students with necessary hostel amenities.\" },\n//     \"Guest House RKV\": { lat: 14.331859, lng: 78.536652, type: \"Guest facility\", hours: \"24x7\", description: \"Well-maintained guest house for hosting visiting faculty, guests, and dignitaries.\" },\n//     \"Hospital\": { lat: 14.337157, lng: 78.532596, type: \"Medical\", hours: \"24x7\", description: \"24x7 medical facility for basic healthcare and emergency services on campus\" },\n//     \"IQAC\": { lat: 14.336884, lng: 78.540791, type: \"Administration\", hours: \"9AM–5PM\", description: \"Institutional cell responsible for maintaining and enhancing academic quality\" },\n//     \"Lab Complex\": { lat: 14.336214, lng: 78.538152, type: \"Department\", hours: \"9AM–5PM\", description: \"Lab facility used by multiple departments for academic experiments and practical sessions\" },\n//     \"Laundry\": { lat: 14.333134, lng: 78.538775, type: \"Laundry\", hours: \"9AM–5PM\", description: \"Laundry service center for washing and drying hostel students’ clothes.\" },\n//     \"Library\": { lat: 14.335547, lng: 78.538723, type: \"Academic\", hours: \"7AM–11PM\", description: \"Central resource hub with a wide collection of books, journals, and study spaces.\" },\n//     \"Masjid\": { lat: 14.339404, lng: 78.535480, type: \"Religious\", hours: \"9AM–7PM\", description: \"Place of worship for Muslim students and staff within the campus.\" },\n//     \"Mechanical Block\": { lat: 14.336277, lng: 78.543308, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Mechanical Engineering equipped for academic and technical training.\" },\n//     \"Mechanical workshop\": { lat: 14.336200, lng: 78.538661, type: \"Department\", hours: \"9AM–5PM\", description: \"Workshop with tools and machinery for mechanical hands-on training and fabrication\" },\n//     \"Mess 1234\": { lat: 14.333753, lng: 78.538477, type: \"Food\", hours: \"7AM–9PM\", description: \"Dining hall serving meals to students with regular breakfast, lunch, and dinner\" },\n//     \"Mess 5678\": { lat: 14.333716, lng: 78.538701, type: \"Food\", hours: \"7AM–9PM\", description: \"Catering facility providing nutritious food to hostel residents and students.\" },\n//     \"MME Block\": { lat: 14.337335, lng: 78.541188, type: \"Department\", hours: \"9AM–5PM\", description: \"Department of Metallurgical and Materials Engineering for academic and research purposes\" },\n//     \"old campus academic blocks\": { lat: 14.339002, lng: 78.537776, type: \"Academic\", hours: \"9AM–5PM\", description: \"Academic buildings from the original campus supporting multiple disciplines\" },\n//     \"old campus boys hostel rho\": { lat: 14.339809, lng: 78.537592, type: \"Hostel\", hours: \"24x7\", description: \"Boys’ hostel located in the older section of the campus with residential facilities.\" },\n//     \"old campus boys hostel theeta\": { lat: 14.339859, lng: 78.537896, type: \"Hostel\", hours: \"24x7\", description: \"Another boys’ hostel in the old campus with accommodation services.\" },\n//     \"old campus girls hostel 1\": { lat: 14.338275, lng: 78.537744, type: \"Hostel\", hours: \"24x7\", description: \"Girls’ hostel located in the old campus area offering safe living spaces.\" },\n//     \"old campus girls hostel 2\": { lat: 14.338288, lng: 78.537914, type: \"Hostel\", hours: \"24x7\", description: \"Second girls’ hostel from the old block, supporting student housing.\" },\n//     \"Police Station\": { lat: 14.337844, lng: 78.536249, type: \"Security\", hours: \"24x7\", description: \"Campus law enforcement unit ensuring discipline, emergency handling, and general safety.\" },\n//     \"Post Office\": { lat: 14.337099, lng: 78.533741, type: \"Service\", hours: \"9AM–4PM\", description: \"Postal unit on campus for sending letters, parcels, and accessing courier services.\" },\n//     \"Power House\": { lat: 14.335040, lng: 78.536465, type: \"Utility\", hours: \"9AM–5PM\", description: \"Electricity management center responsible for power regulation and backup systems.\" },\n//     \"RKV Ground\": { lat: 14.337409, lng: 78.537874, type: \"Play\", hours: \"6AM-8PM\", description: \"Multipurpose playground for sports practices, matches, and college-level tournaments.\" },\n//     \"SBI\": { lat: 14.337374, lng: 78.534579, type: \"Bank\", hours: \"9AM–5PM\", description: \"Banking facility providing financial services including ATM, account handling, and transactions\" },\n//     \"Shopping Complex\": { lat: 14.337353, lng: 78.534061, type: \"Shopping\", hours: \"10AM–9PM\", description: \"Commercial area within campus for everyday shopping, snacks, and general items\" },\n//     \"Sports Complex\": { lat: 14.337243, lng: 78.533690, type: \"Recreational\", hours: \"5AM–10PM\", description: \"Indoor and outdoor sports facilities including courts, tracks, and fitness zones.\" },\n//     \"Student Activity Center\": { lat: 14.338203, lng: 78.540398, type: \"Recreational\", hours: \"9AM–5PM\", description: \"Campus venue for student initiatives, cultural programs, and club activities\" },\n//     \"Temple\": { lat: 14.337074, lng: 78.533307, type: \"Religious\", hours: \"6AM–8PM\", description: \"Spiritual place for religious observance and peaceful reflection.\" },\n//   };\n\n//   // Fetch live location with high accuracy\n//   // useEffect(() => {\n//   //   if (navigator.geolocation) {\n//   //     navigator.geolocation.getCurrentPosition(\n//   //       (location) => {\n//   //         const { latitude, longitude } = location.coords;\n//   //         console.log(\"Live location fetched:\", { latitude, longitude }); // Debug log\n//   //         setPosition([latitude, longitude]);\n//   //         fetchAddress(latitude, longitude);\n//   //         mapRef.current?.setView([latitude, longitude], 18); // Center map on live location\n//   //       },\n//   //       (error) => {\n//   //         console.error(\"Error fetching live location:\", error);\n//   //         setAddress(\"Unable to retrieve location. Try enabling GPS.\");\n//   //         setPosition([rkValley.lat, rkValley.lng]);\n//   //         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//   //       },\n//   //       {\n//   //         enableHighAccuracy: true, // Prioritize GPS\n//   //         timeout: 10000, // 10-second timeout\n//   //         maximumAge: 0 // No cached position\n//   //       }\n//   //     );\n//   //   } else {\n//   //     console.error(\"Geolocation not supported\");\n//   //     setAddress(\"Geolocation not supported\");\n//   //     setPosition([rkValley.lat, rkValley.lng]);\n//   //     alert(\"Geolocation is not supported by your browser. Please select a location from the sidebar.\");\n//   //   }\n//   // }, []);\n\n//   //watching live location \n//   // useEffect(() => {\n//   //   let watchId;\n//   //   let marker = null;\n  \n//   //   if (navigator.geolocation) {\n//   //     watchId = navigator.geolocation.watchPosition(\n//   //       (location) => {\n//   //         const { latitude, longitude } = location.coords;\n//   //         const newPosition = [latitude, longitude];\n//   //         console.log(\"Live location updated:\", { latitude, longitude }); // Debug log\n  \n//   //         setPosition(newPosition);\n//   //         fetchAddress(latitude, longitude);\n  \n//   //         if (mapRef.current) {\n//   //           if (!marker) {\n//   //             // If marker doesn't exist, create it\n//   //             marker = L.marker(newPosition, { \n//   //               icon: L.icon({\n//   //                 iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // You can replace with your own icon URL\n//   //                 iconSize: [30, 30],\n//   //                 iconAnchor: [15, 30]\n//   //               })\n//   //             }).addTo(mapRef.current);\n//   //           } else {\n//   //             // Animate marker moving\n//   //             marker.setLatLng(newPosition);\n//   //           }\n            \n//   //           mapRef.current.setView(newPosition, 18, { animate: true, pan: { duration: 1 } });\n//   //         }\n//   //       },\n//   //       (error) => {\n//   //         console.error(\"Error fetching live location:\", error);\n//   //         setAddress(\"Unable to retrieve location. Try enabling GPS.\");\n//   //         setPosition([rkValley.lat, rkValley.lng]);\n//   //         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//   //       },\n//   //       {\n//   //         enableHighAccuracy: true, // Prioritize GPS\n//   //         timeout: 10000, // 10-second timeout\n//   //         maximumAge: 0 // No cached position\n//   //       }\n//   //     );\n//   //   } else {\n//   //     console.error(\"Geolocation not supported\");\n//   //     setAddress(\"Geolocation not supported\");\n//   //     setPosition([rkValley.lat, rkValley.lng]);\n//   //     alert(\"Geolocation is not supported by your browser. Please select a location from the sidebar.\");\n//   //   }\n  \n//   //   // Cleanup\n//   //   return () => {\n//   //     if (watchId) {\n//   //       navigator.geolocation.clearWatch(watchId);\n//   //     }\n//   //     if (marker && mapRef.current) {\n//   //       mapRef.current.removeLayer(marker);\n//   //     }\n//   //   };\n//   // }, []);\n\n\n//   //change \n//   useEffect(() => {\n//     let watchId;\n  \n//     if (navigator.geolocation) {\n//       watchId = navigator.geolocation.watchPosition(\n//         (location) => {\n//           const { latitude, longitude } = location.coords;\n//           const newPosition = [latitude, longitude];\n//           console.log(\"Live location updated:\", { latitude, longitude }); // Debug log\n  \n//           setPosition(newPosition);\n//           fetchAddress(latitude, longitude);\n  \n//           if (mapRef.current) {\n//             if (!liveMarkerRef.current) {\n//               // Create marker only ONCE\n//               liveMarkerRef.current = L.marker(newPosition, {\n//                 icon: L.icon({\n//                   iconUrl: \"https://cdn-icons-png.flaticon.com/512/684/684908.png\", // your icon\n//                   iconSize: [30, 30],\n//                   iconAnchor: [15, 30],\n//                 })\n//               }).addTo(mapRef.current);\n//             } else {\n//               // Just move the existing marker\n//               liveMarkerRef.current.setLatLng(newPosition);\n//             }\n  \n//             // Smoothly move the map center\n//             mapRef.current.setView(newPosition, 18, { animate: true, pan: { duration: 1 } });\n//           }\n//         },\n//         (error) => {\n//           console.error(\"Error fetching live location:\", error);\n//           setAddress(\"Unable to retrieve location. Try enabling GPS.\");\n//           setPosition([rkValley.lat, rkValley.lng]);\n//           alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//         },\n//         {\n//           enableHighAccuracy: true,\n//           timeout: 10000,\n//           maximumAge: 0\n//         }\n//       );\n//     } else {\n//       console.error(\"Geolocation not supported\");\n//       setAddress(\"Geolocation not supported\");\n//       setPosition([rkValley.lat, rkValley.lng]);\n//       alert(\"Geolocation is not supported by your browser. Please select a location from the sidebar.\");\n//     }\n  \n//     return () => {\n//       if (watchId) {\n//         navigator.geolocation.clearWatch(watchId);\n//       }\n//       if (liveMarkerRef.current && mapRef.current) {\n//         mapRef.current.removeLayer(liveMarkerRef.current);\n//         liveMarkerRef.current = null;\n//       }\n//     };\n//   }, []);\n  \n\n//   // Reverse geocoding function\n//   const fetchAddress = async (lat, lng) => {\n//     try {\n//       const response = await fetch(\n//         `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`\n//       );\n//       const data = await response.json();\n//       console.log(\"Reverse geocoding result:\", data); // Debug log\n//       setAddress(data.display_name || \"Address not found\");\n//     } catch (error) {\n//       console.error(\"Error fetching address:\", error);\n//       setAddress(\"Address not available\");\n//     }\n//   };\n\n//   // Handle live location button click\n//   // const handleLiveLocation = () => {\n//   //   if (navigator.geolocation) {\n//   //     navigator.geolocation.getCurrentPosition(\n//   //       (location) => {\n//   //         const { latitude, longitude } = location.coords;\n//   //         console.log(\"Live location updated:\", { latitude, longitude });\n  \n//   //         const newPosition = [latitude, longitude];\n//   //         setPosition(newPosition);\n//   //         fetchAddress(latitude, longitude);\n  \n//   //         if (mapRef.current) {\n//   //           mapRef.current.setView(newPosition, 18, { animate: true });\n  \n//   //           // Move the existing live marker (not create a new one)\n//   //           if (liveMarkerRef.current) {\n//   //             liveMarkerRef.current.setLatLng(newPosition);\n//   //           }\n//   //         }\n//   //       },\n//   //       (error) => {\n//   //         console.error(\"Error fetching live location:\", error);\n//   //         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//   //       },\n//   //       {\n//   //         enableHighAccuracy: true,\n//   //         timeout: 10000,\n//   //         maximumAge: 0\n//   //       }\n//   //     );\n//   //   } else {\n//   //     alert(\"Geolocation is not supported by your browser.\");\n//   //   }\n//   // };\n//   const handleLiveLocation = () => {\n//   if (navigator.geolocation) {\n//     setLoadingLocation(true); // ⭐ Start loading\n//     navigator.geolocation.getCurrentPosition(\n//       (location) => {\n//         const { latitude, longitude } = location.coords;\n//         console.log(\"Live location updated:\", { latitude, longitude });\n\n//         const newPosition = [latitude, longitude];\n//         setPosition(newPosition);\n//         fetchAddress(latitude, longitude);\n\n//         if (mapRef.current) {\n//           mapRef.current.setView(newPosition, 18, { animate: true });\n\n//           if (liveMarkerRef.current) {\n//             liveMarkerRef.current.setLatLng(newPosition);\n//           }\n//         }\n\n//         setLoadingLocation(false); // ⭐ Stop loading after update\n//       },\n//       (error) => {\n//         console.error(\"Error fetching live location:\", error);\n//         alert(\"Unable to retrieve your location. Please enable GPS or select a location from the sidebar.\");\n//         setLoadingLocation(false); // ⭐ Stop loading even if error\n//       },\n//       {\n//         enableHighAccuracy: true,\n//         timeout: 10000,\n//         maximumAge: 0,\n//       }\n//     );\n//   } else {\n//     alert(\"Geolocation is not supported by your browser.\");\n//   }\n// };\n  \n\n//   const geocodeLocation = (query) => {\n//     const normalized = query.trim().toLowerCase();\n//     for (const name in customLocations) {\n//       if (name.toLowerCase() === normalized) {\n//         return Promise.resolve(customLocations[name]);\n//       }\n//     }\n\n//     return new Promise((resolve, reject) => {\n//       geocoder.current.geocode(query, (results) => {\n//         if (results && results.length > 0) {\n//           const { center } = results[0];\n//           resolve({ lat: center.lat, lng: center.lng });\n//         } else {\n//           reject(\"Location not found\");\n//         }\n//       });\n//     });\n//   };\n\n//   const filterSuggestions = (query) => {\n//     const lowerQuery = query.toLowerCase();\n//     const filtered = Object.keys(customLocations)\n//       .filter(name => name.toLowerCase().includes(lowerQuery))\n//       .map(name => ({ name }));\n//     setSuggestions(filtered);\n//   };\n\n//   // const handleSearchChange = (e) => {\n//   //   const query = e.target.value;\n//   //   setSearchQuery(query);\n//   //   filterSuggestions(query);\n//   // };\n\n//   const handleRoute = async () => {\n//     try {\n//       const src = await geocodeLocation(sourceText);\n//       const dest = await geocodeLocation(destinationText);\n//       setSourceCoords(src);\n//       setDestinationCoords(dest);\n//     } catch (err) {\n//       alert(\"Failed to find one or both locations\");\n//       console.error(err);\n//     }\n//     setShowSearchBar(false);\n//   };\n\n//   const handleBlockClick = (name, coords) => {\n//     setDestinationText(name);\n//     setDestinationCoords(coords);\n//     mapRef.current?.setView([coords.lat, coords.lng], 18);\n\n//     if (mapRef.current) {\n//       const { type, hours, description } = customLocations[name];\n//       const popupContent = `\n//         <div>\n//           <h3>${name}</h3>\n//           <p><strong>Type:</strong> ${type}</p>\n//           <p><strong>Hours:</strong> ${hours}</p>\n//           <p><strong>Description:</strong> ${description}</p>\n//         </div>\n//       `;\n//       L.popup()\n//         .setLatLng([coords.lat, coords.lng])\n//         .setContent(popupContent)\n//         .openOn(mapRef.current);\n//     }\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\", width: \"100vw\", position: \"relative\" }}>\n//       <Navbar />\n//       {/* Sidebar */}\n//       <div style={{\n//         position: \"absolute\",\n//         top: 70,\n//         left: sidebarOpen ? 10 : -250,\n//         width: \"240px\",\n//         transition: \"left 0.3s ease-in-out\",\n//         zIndex: 1001,\n//         background: \"#fff\",\n//         padding: \"12px\",\n//         borderRadius: \"10px\",\n//         boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n//         maxHeight: \"80vh\",\n//         overflowY: \"auto\"\n//       }}>\n//         <h3 style={{ marginBottom: \"10px\", fontSize: \"16px\" }}>📍 Campus Blocks</h3>\n//         <ul style={{ listStyle: \"none\", padding: 0, margin: 0 }}>\n//           {Object.entries(customLocations).map(([name, data]) => (\n//             <li key={name}\n//               onClick={() => handleBlockClick(name, data)}\n//               style={{\n//                 marginBottom: \"10px\",\n//                 padding: \"8px\",\n//                 background: \"#f1f1f1\",\n//                 borderRadius: \"6px\",\n//                 cursor: \"pointer\",\n//                 fontSize: \"14px\"\n//               }}>\n//               <strong>{name}</strong><br />\n//               <small>🧭 {data.type} | 🕒 {data.hours}</small>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       {/* Toggle Sidebar */}\n//       <button\n//         onClick={() => setSidebarOpen(!sidebarOpen)}\n//         style={{\n//           position: \"absolute\",\n//           left: sidebarOpen ? 260 : 10,\n//           top: 70,\n//           zIndex: 1001,\n//           background: \"#007bff\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\"\n//         }}\n//       >\n//         {sidebarOpen ? \"← Hide\" : \"→ Show\"}\n//       </button>\n\n//       {/* Live Location Button (Fixed Top-Right) */}\n//       <button\n//         onClick={handleLiveLocation}\n//         style={{\n//           position: \"fixed\",\n//           right: 10,\n//           bottom: 10,\n//           zIndex: 1001,\n//           background: \"#28a745\",\n//           color: \"#fff\",\n//           border: \"none\",\n//           borderRadius: \"6px\",\n//           padding: \"6px 10px\",\n//           cursor: \"pointer\",\n//           fontSize: \"14px\"\n//         }}\n//       >\n//         📍 Live Location\n//       </button>\n\n//       {/* Input Bar */}\n//       {/* <div\n//   style={{\n//     position: \"absolute\",\n//     top: 10,\n//     left: \"50%\",\n//     transform: \"translateX(-50%)\",\n//     zIndex: 1000,\n//     display: \"flex\",\n//     gap: \"8px\",\n//     background: \"#fff\",\n//     padding: \"10px\",\n//     borderRadius: \"8px\",\n//     marginTop: \"70px\",\n//     boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//     flexWrap: \"wrap\",    // ⭐ ADD THIS LINE\n//     justifyContent: \"center\",\n//     width: \"90%\",        // ⭐ Make sure it doesn't overflow on small screen\n//     maxWidth: \"600px\",   // ⭐ Limit it nicely\n//   }}\n// >\n//   <input\n//     type=\"text\"\n//     placeholder=\"Source (e.g., Library)\"\n//     value={sourceText}\n//     onChange={(e) => {\n//       setSourceText(e.target.value);\n//       setSearchQuery(e.target.value);\n//       filterSuggestions(e.target.value);\n//     }}\n//     onFocus={() => setActiveInput('source')}\n//     style={{\n//       flex: \"1 1 150px\",  // ⭐ Responsive width\n//       padding: \"6px 12px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       minWidth: \"120px\"\n//     }}\n//   />\n  \n//   <input\n//     type=\"text\"\n//     placeholder=\"Destination (e.g., CSE Block)\"\n//     value={destinationText}\n//     onChange={(e) => {\n//       setDestinationText(e.target.value);\n//       setSearchQuery(e.target.value);\n//       filterSuggestions(e.target.value);\n//     }}\n//     onFocus={() => setActiveInput('destination')}\n//     style={{\n//       flex: \"1 1 150px\",\n//       padding: \"6px 12px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       minWidth: \"120px\"\n//     }}\n//   />\n\n//   <select\n//     value={travelMode}\n//     onChange={(e) => setTravelMode(e.target.value)}\n//     style={{\n//       flex: \"1 1 100px\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       border: \"1px solid #ccc\",\n//       background: \"#fff\",\n//       cursor: \"pointer\",\n//       minWidth: \"100px\"\n//     }}\n//   >\n//     <option value=\"walk\">🚶 Walk</option>\n//     <option value=\"bicycle\">🚴 Bicycle</option>\n//     <option value=\"vehicle\">🚗 Vehicle</option>\n//   </select>\n\n//   <button\n//     onClick={handleRoute}\n//     style={{\n//       flex: \"0 0 auto\",\n//       background: \"#28a745\",\n//       color: \"#fff\",\n//       border: \"none\",\n//       padding: \"6px 10px\",\n//       fontSize: \"14px\",\n//       borderRadius: \"6px\",\n//       cursor: \"pointer\",\n//       whiteSpace: \"nowrap\",\n//     }}\n//   >\n//     Route\n//   </button>\n// </div> */}\n\n      \n//     <div style={{ position: \"relative\", zIndex: 1000 }}>\n//       {!showSearchBar && (\n//         <button\n//           onClick={() => setShowSearchBar(true)}\n//           style={{\n//             position: \"absolute\",\n//             top: 10,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n            \n//             background: \"#007bff\",\n//             color: \"#fff\",\n//             border: \"none\",\n//             padding: \"8px 16px\",\n//             fontSize: \"16px\",\n//             borderRadius: \"8px\",\n//             cursor: \"pointer\",\n//             marginTop: \"70px\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//           }}\n//         >\n//           Search\n//         </button>\n//       )}\n\n//       {showSearchBar && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             top: 10,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             display: \"flex\",\n//             gap: \"8px\",\n//             background: \"#fff\",\n//             padding: \"10px\",\n//             borderRadius: \"8px\",\n//             marginTop: \"70px\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//             flexWrap: \"wrap\",\n//             justifyContent: \"center\",\n//             width: \"90%\",\n//             maxWidth: \"600px\",\n//           }}\n//         >\n//           <input\n//             type=\"text\"\n//             placeholder=\"Source (e.g., Library)\"\n//             value={sourceText}\n//             onChange={(e) => {\n//               setSourceText(e.target.value);\n//               setSearchQuery(e.target.value);\n//               filterSuggestions(e.target.value);\n//             }}\n//             onFocus={() => setActiveInput('source')}\n//             style={{\n//               flex: \"1 1 150px\",\n//               padding: \"6px 12px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               border: \"1px solid #ccc\",\n//               minWidth: \"120px\",\n//             }}\n//           />\n\n//           <input\n//             type=\"text\"\n//             placeholder=\"Destination (e.g., CSE Block)\"\n//             value={destinationText}\n//             onChange={(e) => {\n//               setDestinationText(e.target.value);\n//               setSearchQuery(e.target.value);\n//               filterSuggestions(e.target.value);\n//             }}\n//             onFocus={() => setActiveInput('destination')}\n//             style={{\n//               flex: \"1 1 150px\",\n//               padding: \"6px 12px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               border: \"1px solid #ccc\",\n//               minWidth: \"120px\",\n//             }}\n//           />\n\n//           <select\n//             value={travelMode}\n//             onChange={(e) => setTravelMode(e.target.value)}\n//             style={{\n//               flex: \"1 1 100px\",\n//               padding: \"6px 10px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               border: \"1px solid #ccc\",\n//               background: \"#fff\",\n//               cursor: \"pointer\",\n//               minWidth: \"100px\",\n//             }}\n//           >\n//             <option value=\"walk\">🚶 Walk</option>\n//             <option value=\"bicycle\">🚴 Bicycle</option>\n//             <option value=\"vehicle\">🚗 Vehicle</option>\n//           </select>\n\n//           <button\n//             onClick={handleRoute}\n//             style={{\n//               flex: \"0 0 auto\",\n//               background: \"#28a745\",\n//               color: \"#fff\",\n//               border: \"none\",\n//               padding: \"6px 10px\",\n//               fontSize: \"14px\",\n//               borderRadius: \"6px\",\n//               cursor: \"pointer\",\n//               whiteSpace: \"nowrap\",\n//             }}\n//           >\n//             Route\n//           </button>\n//         </div>\n//       )}\n//     </div>\n\n\n//       {/* Search Suggestions */}\n//       {searchQuery && suggestions.length > 0 && (\n//         <ul\n//           style={{\n//             position: \"absolute\",\n//             top: 60,\n//             left: \"50%\",\n//             transform: \"translateX(-50%)\",\n//             background: \"#fff\",\n//             width: \"300px\",\n//             maxHeight: \"150px\",\n//             overflowY: \"auto\",\n//             boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n//             zIndex: 1000,\n//             listStyle: \"none\",\n//             padding: 0,\n//             margin: 0,\n//             marginTop: \"70px\",\n//             borderRadius: \"8px\",\n//           }}\n//         >\n//           {suggestions.map((suggestion, index) => (\n//             <li\n//               key={index}\n//               onClick={() => {\n//                 if (activeInput === 'source') {\n//                   setSourceText(suggestion.name);\n//                 } else if (activeInput === 'destination') {\n//                   setDestinationText(suggestion.name);\n//                 }\n//                 setSuggestions([]);\n//                 setSearchQuery('');\n//               }}\n//               style={{\n//                 padding: \"8px\",\n//                 cursor: \"pointer\",\n//                 backgroundColor: \"#f1f1f1\",\n//                 borderBottom: \"1px solid #ddd\"\n//               }}\n//             >\n//               {suggestion.name}\n//             </li>\n//           ))}\n//         </ul>\n//       )}\n\n//       {/* Map */}\n//       <MapContainer\n//         center={rkValley}\n//         zoom={17}\n//         style={{ width: \"100%\", height: \"100%\" }}\n//         ref={mapRef}\n//         whenCreated={(mapInstance) => {\n//           mapRef.current = mapInstance;\n//           const compass = new L.Control.Compass({\n//             autoActive: true,\n//             showDigit: true,\n//           });\n//           compass.addTo(mapRef.current);\n//         }}\n//       >\n//         <TileLayer\n//           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//         />\n//         {position && (\n//           <Marker position={position}>\n//             <Popup>\n//               <div>\n//                 <p><strong>You are here!</strong></p>\n//                 <p>{address}</p>\n//                 <button\n//                   onClick={handleLiveLocation}\n//                   style={{\n//                     background: \"#007bff\",\n//                     color: \"#fff\",\n//                     border: \"none\",\n//                     padding: \"5px 10px\",\n//                     borderRadius: \"5px\",\n//                     cursor: \"pointer\"\n//                   }}\n//                 >\n//                   Update Location\n//                 </button>\n//                 <p style={{ marginTop: \"10px\", fontSize: \"12px\" }}>\n//                   Not at RGUKT RK Valley? Ensure GPS is enabled or select a location from the sidebar.\n//                 </p>\n//               </div>\n//             </Popup>\n//           </Marker>\n//         )}\n//         <LayersControl position=\"topright\">\n//           <LayersControl.BaseLayer name=\"OpenStreetMap\">\n//             <TileLayer\n//               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//             />\n//           </LayersControl.BaseLayer>\n//           <LayersControl.BaseLayer checked  name=\"Satellite View\">\n//             <TileLayer\n//               attribution='Tiles © Esri — Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n//               url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n//             />\n//           </LayersControl.BaseLayer>\n//         </LayersControl>\n//         {sourceCoords && destinationCoords && (\n//           <RoutingMachine\n//             source={sourceCoords}\n//             destination={destinationCoords}\n//             travelMode={travelMode}\n//           />\n//         )}\n//       </MapContainer>\n//     </div>\n//   );\n// };\n\n// export default MapPage;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}